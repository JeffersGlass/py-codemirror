{"version":3,"file":"core.js","sources":["../node_modules/sticky-module/esm/index.js","../node_modules/@ungap/with-resolvers/index.js","../node_modules/polyscript/esm/fetch-utils.js","../node_modules/basic-devtools/esm/index.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/json.js","../node_modules/coincident/esm/channel.js","../node_modules/coincident/esm/shared/types.js","../node_modules/coincident/esm/fallback.js","../node_modules/coincident/esm/index.js","../node_modules/gc-hook/esm/index.js","../node_modules/coincident/esm/shared/utils.js","../node_modules/coincident/esm/shared/traps.js","../node_modules/coincident/esm/shared/main.js","../node_modules/coincident/esm/window/main.js","../node_modules/coincident/esm/window/thread.js","../node_modules/coincident/esm/shared/thread.js","../node_modules/coincident/esm/shared/worker.js","../node_modules/coincident/esm/window.js","../node_modules/codedent/esm/index.js","../node_modules/plain-tag/esm/index.js","../node_modules/html-escaper/esm/index.js","../node_modules/polyscript/esm/utils.js","../node_modules/polyscript/esm/interpreter/_utils.js","../node_modules/polyscript/esm/interpreter/_python.js","../node_modules/polyscript/esm/interpreter/micropython.js","../node_modules/polyscript/esm/interpreter/pyodide.js","../node_modules/polyscript/esm/interpreter/ruby-wasm-wasi.js","../node_modules/polyscript/esm/interpreter/wasmoon.js","../node_modules/polyscript/esm/interpreters.js","../node_modules/polyscript/esm/toml.js","../node_modules/polyscript/esm/loader.js","../node_modules/polyscript/esm/hooks.js","../node_modules/polyscript/esm/worker/hook.js","../node_modules/polyscript/esm/worker/class.js","../node_modules/polyscript/esm/worker/xworker.js","../node_modules/polyscript/esm/errors.js","../node_modules/polyscript/esm/worker/url.js","../node_modules/polyscript/esm/script-handler.js","../node_modules/polyscript/esm/listeners.js","../node_modules/polyscript/esm/xworker.js","../node_modules/polyscript/esm/custom.js","../node_modules/polyscript/esm/index.js","../src/types.js","../src/all-done.js","../src/plugins.js","../src/exceptions.js","../src/fetch.js","../src/config.js","../src/sync.js","../src/plugins-helper.js","../node_modules/type-checked-collections/esm/index.js","../node_modules/to-json-callback/esm/index.js","../src/stdlib.js","../src/stdlib/pyscript.js","../src/hooks.js","../src/core.js"],"sourcesContent":["/**\n * Allow leaking a module globally to help avoid conflicting exports\n * if the module might have been re-bundled in other projects.\n * @template T\n * @param {string} name the module name to save or retrieve\n * @param {T} value the module as value to save if not known\n * @param {globalThis} [global=globalThis] the reference where modules are saved where `globalThis` is the default\n * @returns {[T, boolean]} the passed `value` or the previous one as first entry, a boolean indicating if it was known or not\n */\nconst stickyModule = (name, value, global = globalThis) => {\n  const symbol = Symbol.for(name);\n  const known = symbol in global;\n  return [\n    known ?\n      global[symbol] :\n      Object.defineProperty(global, symbol, { value })[symbol],\n    known\n  ];\n};\n\nexport default stickyModule;\n","Promise.withResolvers || (Promise.withResolvers = function withResolvers() {\n  var a, b, c = new this(function (resolve, reject) {\n    a = resolve;\n    b = reject;\n  });\n  return {resolve: a, reject: b, promise: c};\n});\n","/** @param {Response} response */\nexport const getBuffer = (response) => response.arrayBuffer();\n\n/** @param {Response} response */\nexport const getJSON = (response) => response.json();\n\n/** @param {Response} response */\nexport const getText = (response) => response.text();\n","/**\n * Given a CSS selector, returns the first matching node, if any.\n * @param {string} css the CSS selector to query\n * @param {Document | DocumentFragment | Element} [root] the optional parent node to query\n * @returns {Element?} the found element, if any\n */\nconst $ = (css, root = document) => root.querySelector(css);\n\n/**\n * Given a CSS selector, returns a list of all matching nodes.\n * @param {string} css the CSS selector to query\n * @param {Document | DocumentFragment | Element} [root] the optional parent node to query\n * @returns {Element[]} a list of found nodes\n */\nconst $$ = (css, root = document) => [...root.querySelectorAll(css)];\n\n/**\n * Given a XPath selector, returns a list of all matching nodes.\n * @param {string} path the XPath selector to evaluate\n * @param {Document | DocumentFragment | Element} [root] the optional parent node to query\n * @returns {Node[]} a list of found nodes (elements, attributes, text, comments)\n */\nconst $x = (path, root = document) => {\n  const expression = (new XPathEvaluator).createExpression(path);\n  const xpath = expression.evaluate(root, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE);\n  const result = [];\n  for (let i = 0, {snapshotLength} = xpath; i < snapshotLength; i++)\n    result.push(xpath.snapshotItem(i));\n  return result;\n};\n\nexport {$, $$, $x};\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","/*! (c) Andrea Giammarchi - ISC */\n\nimport {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst options = {json: true, lossy: true};\n\n/**\n * Revive a previously stringified structured clone.\n * @param {string} str previously stringified data as string.\n * @returns {any} whatever was previously stringified as clone.\n */\nexport const parse = str => deserialize($parse(str));\n\n/**\n * Represent a structured clone value as string.\n * @param {any} any some clone-able value to stringify.\n * @returns {string} the value stringified.\n */\nexport const stringify = any => $stringify(serialize(any, options));\n","// ⚠️ AUTOMATICALLY GENERATED - DO NOT CHANGE\nexport const CHANNEL = '2b7f37dd-0f3c-4afb-a444-c83aed8deab7';\n\nexport const MAIN = 'M' + CHANNEL;\nexport const THREAD = 'T' + CHANNEL;\n","export const OBJECT    = 'object';\nexport const FUNCTION  = 'function';\nexport const BOOLEAN   = 'boolean';\nexport const NUMBER    = 'number';\nexport const STRING    = 'string';\nexport const UNDEFINED = 'undefined';\nexport const BIGINT    = 'bigint';\nexport const SYMBOL    = 'symbol';\nexport const NULL      = 'null';\n","// encodeURIComponent('onmessage=({data:b})=>(Atomics.wait(b,0),postMessage(0))')\n\nexport default buffer => ({\n  value: new Promise(onmessage => {\n    let w = new Worker('data:application/javascript,onmessage%3D(%7Bdata%3Ab%7D)%3D%3E(Atomics.wait(b%2C0)%2CpostMessage(0))');\n    w.onmessage = onmessage;\n    w.postMessage(buffer);\n  })\n});\n","/*! (c) Andrea Giammarchi - ISC */\n\nimport {CHANNEL} from './channel.js';\nimport {FUNCTION} from './shared/types.js';\nimport waitAsyncFallback from './fallback.js';\n\n// just minifier friendly for Blob Workers' cases\nconst {Int32Array, Map, SharedArrayBuffer, Uint16Array} = globalThis;\n\n// common constants / utilities for repeated operations\nconst {BYTES_PER_ELEMENT: I32_BYTES} = Int32Array;\nconst {BYTES_PER_ELEMENT: UI16_BYTES} = Uint16Array;\n\nconst {isArray} = Array;\nconst {notify, wait, waitAsync} = Atomics;\n\nconst waitInterrupt = (sb, delay, handler) => {\n  while (wait(sb, 0, 0, delay) === 'timed-out')\n    handler();\n};\n\n// retain buffers to transfer\nconst buffers = new WeakSet;\n\n// retain either main threads or workers global context\nconst context = new WeakMap;\n\nconst syncResult = {value: {then: fn => fn()}};\n\n// used to generate a unique `id` per each worker `postMessage` \"transaction\"\nlet uid = 0;\n\n/**\n * @typedef {Object} Interrupt used to sanity-check interrupts while waiting synchronously.\n * @prop {function} [handler] a callback invoked every `delay` milliseconds.\n * @prop {number} [delay=42] define `handler` invokes in terms of milliseconds.\n */\n\n/**\n * Create once a `Proxy` able to orchestrate synchronous `postMessage` out of the box.\n * @param {globalThis | Worker} self the context in which code should run\n * @param {{parse: (serialized: string) => any, stringify: (serializable: any) => string, transform?: (value:any) => any, interrupt?: () => void | Interrupt}} [JSON] an optional `JSON` like interface to `parse` or `stringify` content with extra `transform` ability.\n * @returns {ProxyHandler<globalThis> | ProxyHandler<Worker>}\n */\nconst coincident = (self, {parse = JSON.parse, stringify = JSON.stringify, transform, interrupt} = JSON) => {\n  // create a Proxy once for the given context (globalThis or Worker instance)\n  if (!context.has(self)) {\n    // ensure the CHANNEL and data are posted correctly\n    const post = (transfer, ...args) => self.postMessage({[CHANNEL]: args}, {transfer});\n\n    const handler = typeof interrupt === FUNCTION ? interrupt : interrupt?.handler;\n    const delay = interrupt?.delay || 42;\n    const decoder = new TextDecoder('utf-16');\n\n    // automatically uses sync wait (worker -> main)\n    // or fallback to async wait (main -> worker)\n    const waitFor = (isAsync, sb) => isAsync ?\n      (waitAsync || waitAsyncFallback)(sb, 0) :\n      ((handler ? waitInterrupt(sb, delay, handler) : wait(sb, 0)), syncResult);\n\n    // prevent Harakiri https://github.com/WebReflection/coincident/issues/18\n    let seppuku = false;\n\n    context.set(self, new Proxy(new Map, {\n      // there is very little point in checking prop in proxy for this very specific case\n      // and I don't want to orchestrate a whole roundtrip neither, as stuff would fail\n      // regardless if from Worker we access non existent Main callback, and vice-versa.\n      // This is here mostly to guarantee that if such check is performed, at least the\n      // get trap goes through and then it's up to developers guarantee they are accessing\n      // stuff that actually exists elsewhere.\n      has: (_, action) => typeof action === 'string' && !action.startsWith('_'),\n\n      // worker related: get any utility that should be available on the main thread\n      get: (_, action) => action === 'then' ? null : ((...args) => {\n        // transaction id\n        const id = uid++;\n\n        // first contact: just ask for how big the buffer should be\n        // the value would be stored at index [1] while [0] is just control\n        let sb = new Int32Array(new SharedArrayBuffer(I32_BYTES * 2));\n\n        // if a transfer list has been passed, drop it from args\n        let transfer = [];\n        if (buffers.has(args.at(-1) || transfer))\n          buffers.delete(transfer = args.pop());\n\n        // ask for invoke with arguments and wait for it\n        post(transfer, id, sb, action, transform ? args.map(transform) : args);\n\n        // helps deciding how to wait for results\n        const isAsync = self !== globalThis;\n\n        // warn users about possible deadlock still allowing them\n        // to explicitly `proxy.invoke().then(...)` without blocking\n        let deadlock = 0;\n        if (seppuku && isAsync)\n          deadlock = setTimeout(console.warn, 1000, `💀🔒 - Possible deadlock if proxy.${action}(...args) is awaited`);\n\n        return waitFor(isAsync, sb).value.then(() => {\n          clearTimeout(deadlock);\n\n          // commit transaction using the returned / needed buffer length\n          const length = sb[1];\n\n          // filter undefined results\n          if (!length) return;\n\n          // calculate the needed ui16 bytes length to store the result string\n          const bytes = UI16_BYTES * length;\n\n          // round up to the next amount of bytes divided by 4 to allow i32 operations\n          sb = new Int32Array(new SharedArrayBuffer(bytes + (bytes % I32_BYTES)));\n\n          // ask for results and wait for it\n          post([], id, sb);\n          return waitFor(isAsync, sb).value.then(() => parse(\n            decoder.decode(new Uint16Array(sb.buffer).slice(0, length)))\n          );\n        });\n      }),\n\n      // main thread related: react to any utility a worker is asking for\n      set(actions, action, callback) {\n        const type = typeof callback;\n        if (type !== FUNCTION)\n          throw new Error(`Unable to assign ${action} as ${type}`);\n        // lazy event listener and logic handling, triggered once by setters actions\n        if (!actions.size) {\n          // maps results by `id` as they are asked for\n          const results = new Map;\n          // add the event listener once (first defined setter, all others work the same)\n          self.addEventListener('message', async (event) => {\n            // grub the very same library CHANNEL; ignore otherwise\n            const details = event.data?.[CHANNEL];\n            if (isArray(details)) {\n              // if early enough, avoid leaking data to other listeners\n              event.stopImmediatePropagation();\n              const [id, sb, ...rest] = details;\n              let error;\n              // action available: it must be defined/known on the main thread\n              if (rest.length) {\n                const [action, args] = rest;\n                if (actions.has(action)) {\n                  seppuku = true;\n                  try {\n                    // await for result either sync or async and serialize it\n                    const result = await actions.get(action)(...args);\n                    if (result !== void 0) {\n                      const serialized = stringify(transform ? transform(result) : result);\n                      // store the result for \"the very next\" event listener call\n                      results.set(id, serialized);\n                      // communicate the required SharedArrayBuffer length out of the\n                      // resulting serialized string\n                      sb[1] = serialized.length;\n                    }\n                  }\n                  catch (_) {\n                    error = _;\n                  }\n                  finally {\n                    seppuku = false;\n                  }\n                }\n                // unknown action should be notified as missing on the main thread\n                else {\n                  error = new Error(`Unsupported action: ${action}`);\n                }\n                // unlock the wait lock later on\n                sb[0] = 1;\n              }\n              // no action means: get results out of the well known `id`\n              // wait lock automatically unlocked here as no `0` value would\n              // possibly ever land at index `0`\n              else {\n                const result = results.get(id);\n                results.delete(id);\n                // populate the SharedArrayBuffer with utf-16 chars code\n                for (let ui16a = new Uint16Array(sb.buffer), i = 0; i < result.length; i++)\n                  ui16a[i] = result.charCodeAt(i);\n              }\n              // release te worker waiting either the length or the result\n              notify(sb, 0);\n              if (error) throw error;\n            }\n          });\n        }\n        // store this action callback allowing the setter in the process\n        return !!actions.set(action, callback);\n      }\n    }));\n  }\n  return context.get(self);\n};\n\ncoincident.transfer = (...args) => (buffers.add(args), args);\n\nexport default coincident;\n","// (c) Andrea Giammarchi - ISC\n\nconst registry = new FinalizationRegistry(\n  ([onGarbageCollected, held, debug]) => {\n    if (debug) console.debug(`Held value ${String(held)} not relevant anymore`);\n    onGarbageCollected(held);\n  }\n);\n\nconst handler = Object.create(null);\n\n/**\n * Register a generic reference to hold in memory, returning either an explicit replacement for it, if specified as optional extra option, or just a `ProxyHandler<hold>` to allow the GC to collect such proxy later on.\n * @template {object} H\n * @template R\n * @param {H} hold the reference to retain in memory until the returned value is not collected.\n * @param {(held:H) => void} onGarbageCollected the callback to invoke once the returned value is collected.\n * @param {{debug?: true, return?:R, token?:H | false}} [options] optionally override the returned value or the token to unregister. If `debug` is true it will log once FinalizationRegistry kicked in.\n * @returns {R | ProxyHandler<typeof hold>} a transparent proxy for the held reference or whatever override was passed as `return` field of the options.\n */\nexport const create = (\n  hold,\n  onGarbageCollected,\n  { debug, return: R, token = hold } = handler\n) => {\n  // if no reference to return is defined,\n  // create a proxy for the held one and register that instead.\n  const target = R || new Proxy(hold, handler);\n  const args = [target, [onGarbageCollected, hold, !!debug]];\n  if (token !== false) args.push(token);\n  // register the target reference in a way that\n  // the `onGarbageCollected(held)` callback will eventually notify.\n  registry.register(...args);\n  return target;\n};\n\n/**\n * If previously registered as either `token` or `hold` value, allow explicit removal of the entry in the registry.\n * @param {unknown} token the token used during registration. If no `token` was passed, this can be the same `hold` reference.\n * @returns {boolean} `true` if successfully unregistered.\n */\nexport const drop = token => registry.unregister(token);\n\n// TODO: this is probably overkill / unnecessary\n// const registered = new WeakMap;\n// if (registered.has(keep))\n//   unregister(registered.get(keep));\n// registered.set(keep, token || keep);\n","\nimport {\n  OBJECT,\n  FUNCTION,\n  BOOLEAN,\n  NUMBER,\n  STRING,\n  UNDEFINED,\n  BIGINT,\n  SYMBOL,\n  NULL\n} from './types.js';\n\nconst {\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n  isExtensible,\n  ownKeys,\n  preventExtensions,\n  set,\n  setPrototypeOf\n} = Reflect;\n\nconst {assign, create} = Object;\n\nexport const TypedArray = getPrototypeOf(Int8Array);\n\nexport const isArray = 'isArray';\n\nexport {\n  assign,\n  create,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n  isExtensible,\n  ownKeys,\n  preventExtensions,\n  set,\n  setPrototypeOf\n};\n\nexport const augment = (descriptor, how) => {\n  const {get, set, value} = descriptor;\n  if (get) descriptor.get = how(get);\n  if (set) descriptor.set = how(set);\n  if (value) descriptor.value = how(value);\n  return descriptor;\n};\n\nexport const entry = (type, value) => [type, value];\n\nexport const asEntry = transform => value => {\n  const type = typeof value;\n  switch (type) {\n    case OBJECT:\n    if (value == null)\n      return entry(NULL, value);\n    if (value === globalThis)\n      return entry(OBJECT, null);\n    case FUNCTION:\n      return transform(type, value);\n    case BOOLEAN:\n    case NUMBER:\n    case STRING:\n    case UNDEFINED:\n    case BIGINT:\n      return entry(type, value);\n    case SYMBOL: {\n      if (symbols.has(value))\n        return entry(type, symbols.get(value));\n    }\n  }\n  throw new Error(`Unable to handle this ${type} type`);\n};\n\nconst symbols = new Map(\n  ownKeys(Symbol)\n    .filter(s => typeof Symbol[s] === SYMBOL)\n    .map(s => [Symbol[s], s])\n);\n\nexport const symbol = value => {\n  for (const [symbol, name] of symbols) {\n    if (name === value)\n      return symbol;\n  }\n};\n\nexport const transform = o => o;\n\nexport function Bound() {\n  return this;\n}\n","export const APPLY                        = 'apply';\nexport const CONSTRUCT                    = 'construct';\nexport const DEFINE_PROPERTY              = 'defineProperty';\nexport const DELETE_PROPERTY              = 'deleteProperty';\nexport const GET                          = 'get';\nexport const GET_OWN_PROPERTY_DESCRIPTOR  = 'getOwnPropertyDescriptor';\nexport const GET_PROTOTYPE_OF             = 'getPrototypeOf';\nexport const HAS                          = 'has';\nexport const IS_EXTENSIBLE                = 'isExtensible';\nexport const OWN_KEYS                     = 'ownKeys';\nexport const PREVENT_EXTENSION            = 'preventExtensions';\nexport const SET                          = 'set';\nexport const SET_PROTOTYPE_OF             = 'setPrototypeOf';\nexport const DELETE                       = 'delete';\n","import { create as createGCHook } from 'gc-hook';\n\nimport {\n  TypedArray,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n  isExtensible,\n  ownKeys,\n  preventExtensions,\n  set,\n  setPrototypeOf,\n\n  assign,\n  create,\n  augment,\n  entry,\n  asEntry,\n  symbol,\n  transform\n} from './utils.js';\n\nimport {\n  OBJECT,\n  FUNCTION,\n  NUMBER,\n  STRING,\n  SYMBOL,\n  UNDEFINED\n} from './types.js';\n\nimport {\n  APPLY,\n  CONSTRUCT,\n  DEFINE_PROPERTY,\n  DELETE_PROPERTY,\n  GET,\n  GET_OWN_PROPERTY_DESCRIPTOR,\n  GET_PROTOTYPE_OF,\n  HAS,\n  IS_EXTENSIBLE,\n  OWN_KEYS,\n  PREVENT_EXTENSION,\n  SET,\n  SET_PROTOTYPE_OF,\n  DELETE\n} from './traps.js';\n\nexport default (name, patch) => {\n  const eventsHandler = patch && new WeakMap;\n\n  // patch once main UI tread\n  if (patch) {\n    const {addEventListener} = EventTarget.prototype;\n    // this should never be on the way as it's extremely light and fast\n    // but it's necessary to allow \"preventDefault\" or other event invokes at distance\n    defineProperty(EventTarget.prototype, 'addEventListener', {\n      value(type, listener, ...options) {\n        if (options.at(0)?.invoke) {\n          if (!eventsHandler.has(this))\n            eventsHandler.set(this, new Map);\n          eventsHandler.get(this).set(type, [].concat(options[0].invoke));\n          delete options[0].invoke;\n        }\n        return addEventListener.call(this, type, listener, ...options);\n      }\n    });\n  }\n\n  const handleEvent = patch && (event => {\n    const {currentTarget, target, type} = event;\n    for (const method of eventsHandler.get(currentTarget || target)?.get(type) || [])\n      event[method]();\n  });\n\n  return function (thread, MAIN, THREAD, ...args) {\n    let id = 0, $ = this?.transform || transform;\n    const ids = new Map;\n    const values = new Map;\n\n    const {[THREAD]: __thread__} = thread;\n\n    const global = args.length ? assign(create(globalThis), ...args) : globalThis;\n\n    const result = asEntry((type, value) => {\n      if (!ids.has(value)) {\n        let sid;\n        // a bit apocalyptic scenario but if this main runs forever\n        // and the id does a whole int32 roundtrip we might have still\n        // some reference danglign around\n        while (values.has(sid = id++));\n        ids.set(value, sid);\n        values.set(sid, type === OBJECT ? $(value) : value);\n      }\n      return entry(type, ids.get(value));\n    });\n\n    const onGarbageCollected = value => {\n      __thread__(DELETE, entry(STRING, value));\n    };\n\n    const target = ([type, value]) => {\n      switch (type) {\n        case OBJECT:\n          if (value == null)\n            return global;\n          if (typeof value === NUMBER)\n            return values.get(value);\n          if (!(value instanceof TypedArray)) {\n            for (const key in value)\n              value[key] = target(value[key]);\n          }\n          return value;\n        case FUNCTION:\n          if (typeof value === STRING) {\n            if (!values.has(value)) {\n              const cb = function (...args) {\n                if (patch && args.at(0) instanceof Event) handleEvent(...args);\n                return __thread__(\n                  APPLY,\n                  entry(FUNCTION, value),\n                  result(this),\n                  args.map(result)\n                );\n              };\n              values.set(value, new WeakRef(cb));\n              return createGCHook(value, onGarbageCollected, {\n                return: cb,\n                token: false,\n              });\n            }\n            return values.get(value).deref();\n          }\n          return values.get(value);\n        case SYMBOL:\n          return symbol(value);\n      }\n      return value;\n    };\n\n    const trapsHandler = {\n      [APPLY]: (target, thisArg, args) => result(target.apply(thisArg, args)),\n      [CONSTRUCT]: (target, args) => result(new target(...args)),\n      [DEFINE_PROPERTY]: (target, name, descriptor) => result(defineProperty(target, name, descriptor)),\n      [DELETE_PROPERTY]: (target, name) => result(delete target[name]),\n      [GET_PROTOTYPE_OF]: target => result(getPrototypeOf(target)),\n      [GET]: (target, name) => result(target[name]),\n      [GET_OWN_PROPERTY_DESCRIPTOR]: (target, name) => {\n        const descriptor = getOwnPropertyDescriptor(target, name);\n        return descriptor ? entry(OBJECT, augment(descriptor, result)) : entry(UNDEFINED, descriptor);\n      },\n      [HAS]: (target, name) => result(name in target),\n      [IS_EXTENSIBLE]: target => result(isExtensible(target)),\n      [OWN_KEYS]: target => entry(OBJECT, ownKeys(target).map(result)),\n      [PREVENT_EXTENSION]: target => result(preventExtensions(target)),\n      [SET]: (target, name, value) => result(set(target, name, value)),\n      [SET_PROTOTYPE_OF]: (target, proto) => result(setPrototypeOf(target, proto)),\n      [DELETE](id) {\n        ids.delete(values.get(id));\n        values.delete(id);\n      }\n    };\n\n    thread[MAIN] = (trap, entry, ...args) => {\n      switch (trap) {\n        case APPLY:\n          args[0] = target(args[0]);\n          args[1] = args[1].map(target);\n          break;\n        case CONSTRUCT:\n          args[0] = args[0].map(target);\n          break;\n        case DEFINE_PROPERTY: {\n          const [name, descriptor] = args;\n          args[0] = target(name);\n          const {get, set, value} = descriptor;\n          if (get) descriptor.get = target(get);\n          if (set) descriptor.set = target(set);\n          if (value) descriptor.value = target(value);\n          break;\n        }\n        default:\n          args = args.map(target);\n          break;\n      }\n      return trapsHandler[trap](target(entry), ...args);\n    };\n\n    return {\n      proxy: thread,\n      [name.toLowerCase()]: global,\n      [`is${name}Proxy`]: () => false\n    };\n  };\n};\n","import main from '../shared/main.js';\n\nexport default main('Window', true);\n","import thread from '../shared/thread.js';\n\nexport default thread('Window');\n","import { create as createGCHook } from 'gc-hook';\n\nimport {\n  Bound,\n  TypedArray,\n  augment,\n  defineProperty,\n  entry,\n  asEntry,\n  symbol,\n  transform,\n  isArray\n} from './utils.js';\n\nimport {\n  OBJECT,\n  FUNCTION,\n  NUMBER,\n  STRING,\n  SYMBOL\n} from './types.js';\n\nimport {\n  APPLY,\n  CONSTRUCT,\n  DEFINE_PROPERTY,\n  DELETE_PROPERTY,\n  GET,\n  GET_OWN_PROPERTY_DESCRIPTOR,\n  GET_PROTOTYPE_OF,\n  HAS,\n  IS_EXTENSIBLE,\n  OWN_KEYS,\n  PREVENT_EXTENSION,\n  SET,\n  SET_PROTOTYPE_OF,\n  DELETE\n} from './traps.js';\n\nexport default name => {\n  let id = 0;\n  const ids = new Map;\n  const values = new Map;\n\n  const __proxied__ = Symbol();\n\n  const bound = target => typeof target === FUNCTION ? target() : target;\n\n  const isProxy = value => typeof value === OBJECT && !!value && __proxied__ in value;\n\n  const localArray = Array[isArray];\n\n  return function (main, MAIN, THREAD) {\n    const $ = this?.transform || transform;\n    const { [MAIN]: __main__ } = main;\n\n    const proxies = new Map;\n\n    const onGarbageCollected = value => {\n      proxies.delete(value);\n      __main__(DELETE, argument(value));\n    };\n\n    const argument = asEntry(\n      (type, value) => {\n        if (__proxied__ in value)\n          return bound(value[__proxied__]);\n        if (type === FUNCTION) {\n          value = $(value);\n          if (!values.has(value)) {\n            let sid;\n            // a bit apocalyptic scenario but if this thread runs forever\n            // and the id does a whole int32 roundtrip we might have still\n            // some reference dangling around\n            while (values.has(sid = String(id++)));\n            ids.set(value, sid);\n            values.set(sid, value);\n          }\n          return entry(type, ids.get(value));\n        }\n        if (!(value instanceof TypedArray)) {\n          if (type === OBJECT)\n            value = $(value);\n          for(const key in value)\n            value[key] = argument(value[key]);\n        }\n        return entry(type, value);\n      }\n    );\n\n    const register = (entry) => {\n      const [type, value] = entry;\n      if (!proxies.has(value)) {\n        const target = type === FUNCTION ? Bound.bind(entry) : entry;\n        const proxy = new Proxy(target, proxyHandler);\n        proxies.set(value, new WeakRef(proxy));\n        return createGCHook(value, onGarbageCollected, {\n          return: proxy,\n          token: false,\n        });\n      }\n      return proxies.get(value).deref();\n    };\n\n    const fromEntry = entry => {\n      const [type, value] = entry;\n      switch (type) {\n        case OBJECT:\n          return value === null ? globalThis : (\n            typeof value === NUMBER ? register(entry) : value\n          );\n        case FUNCTION:\n          return typeof value === STRING ? values.get(value) : register(entry);\n        case SYMBOL:\n          return symbol(value);\n      }\n      return value;\n    };\n\n    const result = (TRAP, target, ...args) => fromEntry(__main__(TRAP, bound(target), ...args));\n\n    const proxyHandler = {\n      [APPLY]: (target, thisArg, args) => result(APPLY, target, argument(thisArg), args.map(argument)),\n      [CONSTRUCT]: (target, args) => result(CONSTRUCT, target, args.map(argument)),\n      [DEFINE_PROPERTY]: (target, name, descriptor) => {\n        const { get, set, value } = descriptor;\n        if (typeof get === FUNCTION) descriptor.get = argument(get);\n        if (typeof set === FUNCTION) descriptor.set = argument(set);\n        if (typeof value === FUNCTION) descriptor.value = argument(value);\n        return result(DEFINE_PROPERTY, target, argument(name), descriptor);\n      },\n      [DELETE_PROPERTY]: (target, name) => result(DELETE_PROPERTY, target, argument(name)),\n      [GET_PROTOTYPE_OF]: target => result(GET_PROTOTYPE_OF, target),\n      [GET]: (target, name) => name === __proxied__ ? target : result(GET, target, argument(name)),\n      [GET_OWN_PROPERTY_DESCRIPTOR]: (target, name) => {\n        const descriptor = result(GET_OWN_PROPERTY_DESCRIPTOR, target, argument(name));\n        return descriptor && augment(descriptor, fromEntry);\n      },\n      [HAS]: (target, name) => name === __proxied__ || result(HAS, target, argument(name)),\n      [IS_EXTENSIBLE]: target => result(IS_EXTENSIBLE, target),\n      [OWN_KEYS]: target => result(OWN_KEYS, target).map(fromEntry),\n      [PREVENT_EXTENSION]: target => result(PREVENT_EXTENSION, target),\n      [SET]: (target, name, value) => result(SET, target, argument(name), argument(value)),\n      [SET_PROTOTYPE_OF]: (target, proto) => result(SET_PROTOTYPE_OF, target, argument(proto)),\n    };\n\n    main[THREAD] = (trap, entry, ctx, args) => {\n      switch (trap) {\n        case APPLY:\n          return fromEntry(entry).apply(fromEntry(ctx), args.map(fromEntry));\n        case DELETE: {\n          const id = fromEntry(entry);\n          ids.delete(values.get(id));\n          values.delete(id);\n        }\n      }\n    };\n\n    const global = new Proxy([OBJECT, null], proxyHandler);\n\n    // this is needed to avoid confusion when new Proxy([type, value])\n    // passes through `isArray` check, as that would return always true\n    // by specs and there's no Proxy trap to avoid it.\n    const remoteArray = global.Array[isArray];\n    defineProperty(Array, isArray, {\n      value: ref => isProxy(ref) ? remoteArray(ref) : localArray(ref)\n    });\n\n    return {\n      [name.toLowerCase()]: global,\n      [`is${name}Proxy`]: isProxy,\n      proxy: main\n    };\n  };\n};\n","import {FUNCTION} from \"./types.js\";\nexport default typeof Worker === FUNCTION ? Worker : class {};\n","import {MAIN, THREAD} from './channel.js';\nimport $coincident from './index.js';\nimport main from './window/main.js';\nimport thread from './window/thread.js';\nimport Worker from './shared/worker.js';\n\nconst proxies = new WeakMap;\n\n/**\n * @typedef {object} Coincident\n * @property {ProxyHandler<globalThis>} proxy\n * @property {ProxyHandler<Window>} window\n * @property {(value: any) => boolean} isWindowProxy\n */\n\n/**\n * Create once a `Proxy` able to orchestrate synchronous `postMessage` out of the box.\n * In workers, returns a `{proxy, window, isWindowProxy}` namespace to reach main globals synchronously.\n * @param {Worker | globalThis} self the context in which code should run\n * @returns {ProxyHandler<Worker> | Coincident}\n */\nconst coincident = (self, ...args) => {\n  const proxy = $coincident(self, ...args);\n  if (!proxies.has(proxy)) {\n    const util = self instanceof Worker ? main : thread;\n    proxies.set(proxy, util.call(args.at(0), proxy, MAIN, THREAD));\n  }\n  return proxies.get(proxy);\n}\n\ncoincident.transfer = $coincident.transfer;\n\nexport default coincident;\n","import content from 'plain-tag';\n\nconst dedent = {\n  object(...args) {\n    return this.string(content(...args));\n  },\n  string(content) {\n    for (const line of content.split(/[\\r\\n]+/)) {\n      // skip initial empty lines\n      if (line.trim().length) {\n        // trap indentation at the very first line of code\n        if (/^(\\s+)/.test(line))\n          content = content.replace(new RegExp('^' + RegExp.$1, 'gm'), '');\n        // no indentation? all good: get out of here!\n        break;\n      }\n    }\n    return content;\n  }\n};\n\n/**\n * Usable both as template literal tag or just as callback for strings, removes all spaces found\n * at the very first line of code encountered while sanitizing, keeping everything else around.\n * @param {string | TemplateStringsArray} tpl either code as string or as template, when used as tag\n * @param  {...any} values the template interpolations, when used as tag\n * @returns {string} code without undesired indentation\n */\nconst codedent = (tpl, ...values) => dedent[typeof tpl](tpl, ...values);\n\nexport default codedent;\n","export default function (t) {\n  for (var s = t[0], i = 1, l = arguments.length; i < l; i++)\n    s += arguments[i] + t[i];\n  return s;\n};\n","/**\n * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst {replace} = '';\n\n// escape\nconst es = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;\nconst ca = /[&<>'\"]/g;\n\nconst esca = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;'\n};\nconst pe = m => esca[m];\n\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`.\n * @param {string} es the input to safely escape\n * @returns {string} the escaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\nexport const escape = es => replace.call(es, ca, pe);\n\n\n// unescape\nconst unes = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"'\n};\nconst cape = m => unes[m];\n\n/**\n * Safely unescape previously escaped entities such as `&`, `<`, `>`, `\"`,\n * and `'`.\n * @param {string} un a previously escaped string\n * @returns {string} the unescaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\nexport const unescape = un => replace.call(un, es, cape);\n","import $dedent from 'codedent';\nimport { unescape as $unescape } from 'html-escaper';\nimport { io } from './interpreter/_utils.js';\n\n/** @type {(tpl: string | TemplateStringsArray, ...values:any[]) => string} */\nconst dedent = $dedent;\n\n/** @type {(value:string) => string} */\nconst unescape = $unescape;\n\nconst { isArray } = Array;\n\nconst { assign, create, defineProperties, defineProperty, entries } = Object;\n\nconst { all, resolve } = new Proxy(Promise, {\n    get: ($, name) => $[name].bind($),\n});\n\nconst absoluteURL = (path, base = location.href) =>\n    new URL(path, base.replace(/^blob:/, '')).href;\n\n/* c8 ignore start */\nlet id = 0;\nconst nodeInfo = (node, type) => ({\n    id: node.id || (node.id = `${type}-w${id++}`),\n    tag: node.tagName\n});\n\n/**\n * Notify the main thread about element \"readiness\".\n * @param {HTMLScriptElement | HTMLElement} target the script or custom-type element\n * @param {string} type the custom/type as event prefix\n * @param {string} what the kind of event to dispatch, i.e. `ready` or `done`\n * @param {boolean} [worker = false] `true` if dispatched form a worker, `false` by default if in main\n * @param {globalThis.CustomEvent} [CustomEvent = globalThis.CustomEvent] the `CustomEvent` to use\n */\nconst dispatch = (target, type, what, worker = false, CE = CustomEvent) => {\n    target.dispatchEvent(\n        new CE(`${type}:${what}`, {\n            bubbles: true,\n            detail: { worker },\n        })\n    );\n};\n\nexport const createFunction = value => Function(`'use strict';return (${value})`)();\n\nexport const createResolved = (module, type, config, interpreter) => ({\n    type,\n    config,\n    interpreter,\n    io: io.get(interpreter),\n    run: (code, ...args) => module.run(interpreter, code, ...args),\n    runAsync: (code, ...args) => module.runAsync(interpreter, code, ...args),\n    runEvent: (...args) => module.runEvent(interpreter, ...args),\n});\n\nexport const createOverload = (module, name) => ($, pre) => {\n    const method = module[name].bind(module);\n    module[name] = (interpreter, code, ...args) =>\n        method(interpreter, `${pre ? $ : code}\\n${pre ? code : $}`, ...args);\n};\n/* c8 ignore stop */\n\nexport {\n    dedent, unescape,\n    dispatch,\n    isArray,\n    assign,\n    create,\n    defineProperties,\n    defineProperty,\n    entries,\n    all,\n    resolve,\n    absoluteURL,\n    nodeInfo,\n};\n","import '@ungap/with-resolvers';\n\nimport { getBuffer } from '../fetch-utils.js';\nimport { absoluteURL } from '../utils.js';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport const io = new WeakMap();\nexport const stdio = (init) => {\n    const context = init || console;\n    const localIO = {\n        stderr: (context.stderr || console.error).bind(context),\n        stdout: (context.stdout || console.log).bind(context),\n    };\n    return {\n        stderr: (...args) => localIO.stderr(...args),\n        stdout: (...args) => localIO.stdout(...args),\n        async get(engine) {\n            const interpreter = await engine;\n            io.set(interpreter, localIO);\n            return interpreter;\n        },\n    };\n};\n\n// This should be the only helper needed for all Emscripten based FS exports\nexport const writeFile = ({ FS, PATH, PATH_FS }, path, buffer) => {\n    const absPath = PATH_FS.resolve(path);\n    FS.mkdirTree(PATH.dirname(absPath));\n    return FS.writeFile(absPath, new Uint8Array(buffer), {\n        canOwn: true,\n    });\n};\n/* c8 ignore stop */\n\n// This is instead a fallback for Lua or others\nexport const writeFileShim = (FS, path, buffer) => {\n    mkdirTree(FS, dirname(path));\n    path = resolve(FS, path);\n    return FS.writeFile(path, new Uint8Array(buffer), { canOwn: true });\n};\n\nconst dirname = (path) => {\n    const tree = path.split('/');\n    tree.pop();\n    return tree.join('/');\n};\n\nconst mkdirTree = (FS, path) => {\n    const current = [];\n    for (const branch of path.split('/')) {\n        if (branch === '.') continue;\n        current.push(branch);\n        if (branch) FS.mkdir(current.join('/'));\n    }\n};\n\nconst resolve = (FS, path) => {\n    const tree = [];\n    for (const branch of path.split('/')) {\n        switch (branch) {\n            case '':\n                break;\n            case '.':\n                break;\n            case '..':\n                tree.pop();\n                break;\n            default:\n                tree.push(branch);\n        }\n    }\n    return [FS.cwd()].concat(tree).join('/').replace(/^\\/+/, '/');\n};\n\nimport { all, isArray } from '../utils.js';\n\nconst calculateFetchPaths = (config_fetch) => {\n    // REQUIRES INTEGRATION TEST\n    /* c8 ignore start */\n    for (const { files, to_file, from = '' } of config_fetch) {\n        if (files !== undefined && to_file !== undefined)\n            throw new Error(\n                'Cannot use \\'to_file\\' and \\'files\\' parameters together!',\n            );\n        if (files === undefined && to_file === undefined && from.endsWith('/'))\n            throw new Error(\n                `Couldn't determine the filename from the path ${from}, please supply 'to_file' parameter.`,\n            );\n    }\n    /* c8 ignore stop */\n    return config_fetch.flatMap(\n        ({ from = '', to_folder = '.', to_file, files }) => {\n            if (isArray(files))\n                return files.map((file) => ({\n                    url: joinPaths([from, file]),\n                    path: joinPaths([to_folder, file]),\n                }));\n            const filename = to_file || from.slice(1 + from.lastIndexOf('/'));\n            return [{ url: from, path: joinPaths([to_folder, filename]) }];\n        },\n    );\n};\n\nconst joinPaths = (parts) => {\n    const res = parts\n        .map((part) => part.trim().replace(/(^[/]*|[/]*$)/g, ''))\n        .filter((p) => p !== '' && p !== '.')\n        .join('/');\n\n    return parts[0].startsWith('/') ? `/${res}` : res;\n};\n\nconst fetchResolved = (config_fetch, url) =>\n    fetch(absoluteURL(url, base.get(config_fetch)));\n\nexport const base = new WeakMap();\n\n/* c8 ignore start */\nexport const fetchPaths = (module, interpreter, config_fetch) =>\n    all(\n        calculateFetchPaths(config_fetch).map(({ url, path }) =>\n            fetchResolved(config_fetch, url)\n                .then(getBuffer)\n                .then((buffer) => module.writeFile(interpreter, path, buffer)),\n        ),\n    );\n\n    const fillName = (source, dest) => dest.endsWith('/') ?\n                        `${dest}${source.split('/').pop()}` : dest;\n\nconst parseTemplate = (src, map) => src.replace(\n  /\\{.+?\\}/g,\n  k => {\n    if (!map.has(k))\n      throw new SyntaxError(`Invalid template: ${k}`);\n    return map.get(k);\n  }\n);\n\nconst calculateFilesPaths = files => {\n  const map = new Map;\n  const targets = new Set;\n  const sourceDest = [];\n  for (const [source, dest] of Object.entries(files)) {\n    if (/^\\{.+\\}$/.test(source)) {\n      if (map.has(source))\n        throw new SyntaxError(`Duplicated template: ${source}`);\n      map.set(source, parseTemplate(dest, map));\n    }\n    else {\n      const url = parseTemplate(source, map);\n      const path = fillName(url, parseTemplate(dest || './', map));\n      if (targets.has(path))\n        throw new SyntaxError(`Duplicated destination: ${path}`);\n      targets.add(path);\n      sourceDest.push({ url, path });\n    }\n  }\n  return sourceDest;\n};\n\nexport const fetchFiles = (module, interpreter, config_files) =>\n    all(\n        calculateFilesPaths(config_files).map(({ url, path }) =>\n            fetchResolved(config_files, url)\n                .then(getBuffer)\n                .then((buffer) => module.writeFile(interpreter, path, buffer)),\n        ),\n    );\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { io } from './_utils.js';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport const registerJSModule = (interpreter, name, value) => {\n    interpreter.registerJsModule(name, value);\n};\n\nexport const run = (interpreter, code, ...args) => {\n    try {\n        return interpreter.runPython(dedent(code), ...args);\n    }\n    catch (error) {\n        io.get(interpreter).stderr(error);\n    }\n};\n\nexport const runAsync = async (interpreter, code, ...args) => {\n    try {\n        return await interpreter.runPythonAsync(dedent(code), ...args);\n    }\n    catch (error) {\n        io.get(interpreter).stderr(error);\n    }\n};\n\nexport const runEvent = async (interpreter, code, event) => {\n    // allows method(event) as well as namespace.method(event)\n    // it does not allow fancy brackets names for now\n    const [name, ...keys] = code.split('.');\n    let target = interpreter.globals.get(name);\n    let context;\n    for (const key of keys) [context, target] = [target, target[key]];\n    try {\n        await target.call(context, event);\n    }\n    catch (error) {\n        io.get(interpreter).stderr(error);\n    }\n};\n/* c8 ignore stop */\n","import { fetchFiles, fetchPaths, stdio, writeFile } from './_utils.js';\nimport { registerJSModule, run, runAsync, runEvent } from './_python.js';\n\nconst type = 'micropython';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    module: (version = '1.20.0-297') =>\n        `https://cdn.jsdelivr.net/npm/@micropython/micropython-webassembly-pyscript@${version}/micropython.mjs`,\n    async engine({ loadMicroPython }, config, url) {\n        const { stderr, stdout, get } = stdio();\n        url = url.replace(/\\.m?js$/, '.wasm');\n        const interpreter = await get(loadMicroPython({ stderr, stdout, url }));\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        return interpreter;\n    },\n    registerJSModule,\n    run,\n    runAsync,\n    runEvent,\n    transform: (_, value) => value,\n    writeFile: ({ FS, _module: { PATH, PATH_FS } }, path, buffer) =>\n        writeFile({ FS, PATH, PATH_FS }, path, buffer),\n};\n/* c8 ignore stop */\n","import { fetchFiles, fetchPaths, stdio, writeFile } from './_utils.js';\nimport { registerJSModule, run, runAsync, runEvent } from './_python.js';\n\nconst type = 'pyodide';\nconst toJsOptions = { dict_converter: Object.fromEntries };\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    module: (version = '0.24.1') =>\n        `https://cdn.jsdelivr.net/pyodide/v${version}/full/pyodide.mjs`,\n    async engine({ loadPyodide }, config, url) {\n        const { stderr, stdout, get } = stdio();\n        const indexURL = url.slice(0, url.lastIndexOf('/'));\n        const interpreter = await get(\n            loadPyodide({ stderr, stdout, indexURL }),\n        );\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        if (config.packages) {\n            await interpreter.loadPackage('micropip');\n            const micropip = await interpreter.pyimport('micropip');\n            await micropip.install(config.packages, { keep_going: true });\n            micropip.destroy();\n        }\n        return interpreter;\n    },\n    registerJSModule,\n    run,\n    runAsync,\n    runEvent,\n    transform: (interpreter, value) => (\n        value instanceof interpreter.ffi.PyProxy ?\n            value.toJs(toJsOptions) :\n            value\n    ),\n    writeFile: ({ FS, PATH, _module: { PATH_FS } }, path, buffer) =>\n        writeFile({ FS, PATH, PATH_FS }, path, buffer),\n};\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { fetchFiles, fetchPaths } from './_utils.js';\n\nconst type = 'ruby-wasm-wasi';\nconst jsType = type.replace(/\\W+/g, '_');\n\n// MISSING:\n//  * there is no VFS apparently or I couldn't reach any\n//  * I've no idea how to override the stderr and stdout\n//  * I've no idea how to import packages\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    experimental: true,\n    module: (version = '2.1.0') =>\n        `https://cdn.jsdelivr.net/npm/ruby-3_2-wasm-wasi@${version}/dist/browser.esm.js`,\n    async engine({ DefaultRubyVM }, config, url) {\n        const response = await fetch(\n            `${url.slice(0, url.lastIndexOf('/'))}/ruby.wasm`,\n        );\n        const module = await WebAssembly.compile(await response.arrayBuffer());\n        const { vm: interpreter } = await DefaultRubyVM(module);\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        return interpreter;\n    },\n    // Fallback to globally defined module fields (i.e. $xworker)\n    registerJSModule(interpreter, name, value) {\n        const id = `__module_${jsType}_${name}`;\n        globalThis[id] = value;\n        this.run(interpreter, `require \"js\";$${name}=JS.global[:${id}]`);\n        delete globalThis[id];\n    },\n    run: (interpreter, code, ...args) => interpreter.eval(dedent(code), ...args),\n    runAsync: (interpreter, code, ...args) => interpreter.evalAsync(dedent(code), ...args),\n    async runEvent(interpreter, code, event) {\n        // patch common xworker.onmessage/onerror cases\n        if (/^xworker\\.(on\\w+)$/.test(code)) {\n            const { $1: name } = RegExp;\n            const id = `__module_${jsType}_event`;\n            globalThis[id] = event;\n            this.run(\n                interpreter,\n                `require \"js\";$xworker.call(\"${name}\",JS.global[:${id}])`,\n            );\n            delete globalThis[id];\n        } else {\n            // Experimental: allows only events by fully qualified method name\n            const method = this.run(interpreter, `method(:${code})`);\n            await method.call(code, interpreter.wrap(event));\n        }\n    },\n    transform: (_, value) => value,\n    writeFile: () => {\n        throw new Error(`writeFile is not supported in ${type}`);\n    },\n};\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { fetchFiles, fetchPaths, io, stdio, writeFileShim } from './_utils.js';\n\nconst type = 'wasmoon';\n\n// MISSING:\n//  * I've no idea how to import packages\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    module: (version = '1.15.1') =>\n        `https://cdn.jsdelivr.net/npm/wasmoon@${version}/+esm`,\n    async engine({ LuaFactory, LuaLibraries }, config) {\n        const { stderr, stdout, get } = stdio();\n        const interpreter = await get(new LuaFactory().createEngine());\n        interpreter.global.getTable(LuaLibraries.Base, (index) => {\n            interpreter.global.setField(index, 'print', stdout);\n            interpreter.global.setField(index, 'printErr', stderr);\n        });\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        return interpreter;\n    },\n    // Fallback to globally defined module fields\n    registerJSModule: (interpreter, name, value) => {\n        interpreter.global.set(name, value);\n    },\n    run: (interpreter, code, ...args) => {\n        try {\n            return interpreter.doStringSync(dedent(code), ...args);\n        }\n        catch (error) {\n            io.get(interpreter).stderr(error);\n        }\n    },\n    runAsync: async (interpreter, code, ...args) => {\n        try {\n            return await interpreter.doString(dedent(code), ...args);\n        }\n        catch (error) {\n            io.get(interpreter).stderr(error);\n        }\n    },\n    runEvent: async (interpreter, code, event) => {\n        // allows method(event) as well as namespace.method(event)\n        // it does not allow fancy brackets names for now\n        const [name, ...keys] = code.split('.');\n        let target = interpreter.global.get(name);\n        let context;\n        for (const key of keys) [context, target] = [target, target[key]];\n        try {\n            await target.call(context, event);\n        }\n        catch (error) {\n            io.get(interpreter).stderr(error);\n        }\n    },\n    transform: (_, value) => value,\n    writeFile: (\n        {\n            cmodule: {\n                module: { FS },\n            },\n        },\n        path,\n        buffer,\n    ) => writeFileShim(FS, path, buffer),\n};\n/* c8 ignore stop */\n","// ⚠️ Part of this file is automatically generated\n//    The :RUNTIMES comment is a delimiter and no code should be written/changed after\n//    See rollup/build_interpreters.cjs to know more\n\nimport { base } from './interpreter/_utils.js';\n\n/** @type {Map<string, object>} */\nexport const registry = new Map();\n\n/** @type {Map<string, object>} */\nexport const configs = new Map();\n\n/** @type {string[]} */\nexport const selectors = [];\n\n/** @type {string[]} */\nexport const prefixes = [];\n\nexport const interpreter = new Proxy(new Map(), {\n    get(map, id) {\n        if (!map.has(id)) {\n            const [type, ...rest] = id.split('@');\n            const interpreter = registry.get(type);\n            const url = /^(?:\\.?\\.?\\/|https?:\\/\\/)/i.test(rest) \n                ? rest.join('@')\n                : interpreter.module(...rest);\n            map.set(id, {\n                url,\n                module: import(/* webpackIgnore: true */url),\n                engine: interpreter.engine.bind(interpreter),\n            });\n        }\n        const { url, module, engine } = map.get(id);\n        return (config, baseURL) =>\n            module.then((module) => {\n                configs.set(id, config);\n                for (const entry of ['files', 'fetch']) {\n                    const value = config?.[entry];\n                    if (value) base.set(value, baseURL);\n                }\n                return engine(module, config, url);\n            });\n    },\n});\n\nconst register = (interpreter) => {\n    for (const type of [].concat(interpreter.type)) {\n        registry.set(type, interpreter);\n        selectors.push(`script[type=\"${type}\"]`);\n        prefixes.push(`${type}-`);\n    }\n};\n\n//:RUNTIMES\nimport micropython from './interpreter/micropython.js';\nimport pyodide from './interpreter/pyodide.js';\nimport ruby_wasm_wasi from './interpreter/ruby-wasm-wasi.js';\nimport wasmoon from './interpreter/wasmoon.js';\nfor (const interpreter of [micropython, pyodide, ruby_wasm_wasi, wasmoon])\n    register(interpreter);\n","// lazy TOML parser (fast-toml might be a better alternative)\nconst TOML_LIB = 'https://cdn.jsdelivr.net/npm/basic-toml@0.3.1/es.js';\n\n/**\n * @param {string} text TOML text to parse\n * @returns {object} the resulting JS object\n */\nexport const parse = async (text) => (await import(/* webpackIgnore: true */TOML_LIB)).parse(text);\n","import { interpreter } from './interpreters.js';\nimport { absoluteURL, resolve } from './utils.js';\nimport { parse } from './toml.js';\nimport { getJSON, getText } from './fetch-utils.js';\n\nexport const getConfigURLAndType = config => {\n    // REQUIRES INTEGRATION TEST\n    /* c8 ignore start */\n    let type = typeof config;\n    if (type === 'string' && /\\.(json|toml|txt)$/.test(config))\n        type = RegExp.$1;\n    else\n        config = './config.txt';\n    return [absoluteURL(config), type];\n    /* c8 ignore stop */\n};\n\n/**\n * Parse a generic config if it came from an attribute either as URL\n * or as a serialized string. In XWorker case, accepts a pre-defined\n * options to use as it is to avoid needing at all a fetch operation.\n * In latter case, config will be suffixed as `config.txt`.\n * @param {string} id the interpreter name @ version identifier\n * @param {string} [config] optional config file to parse\n * @param {object} [options] optional options used to bootstrap XWorker\n * @returns\n */\nexport const getRuntime = (id, config, options = {}) => {\n    if (config) {\n        // REQUIRES INTEGRATION TEST\n        /* c8 ignore start */\n        const [absolute, type] = getConfigURLAndType(config);\n        if (type === 'json') {\n            options = fetch(absolute).then(getJSON);\n        } else if (type === 'toml') {\n            options = fetch(absolute).then(getText).then(parse);\n        } else if (type === 'string') {\n            try {\n                options = JSON.parse(config);\n            } catch (_) {\n                options = parse(config);\n            }\n        } else if (type === 'object' && config) {\n            options = config;\n        }\n        config = absolute;\n        /* c8 ignore stop */\n    }\n    return resolve(options).then(options => interpreter[id](options, config));\n};\n\n/**\n * @param {string} type the interpreter type\n * @param {string} [version] the optional interpreter version\n * @returns\n */\nexport const getRuntimeID = (type, version = '') =>\n    `${type}@${version}`.replace(/@$/, '');\n","import { registry } from './interpreters.js';\n\nconst beforeRun = 'BeforeRun';\nconst afterRun = 'AfterRun';\n\nexport const code = [\n    `code${beforeRun}`,\n    `code${beforeRun}Async`,\n    `code${afterRun}`,\n    `code${afterRun}Async`,\n];\n\nexport const js = [\n    'onWorker',\n    'onReady',\n    `on${beforeRun}`,\n    `on${beforeRun}Async`,\n    `on${afterRun}`,\n    `on${afterRun}Async`,\n];\n\n/* c8 ignore start */\n// create a copy of the resolved wrapper with the original\n// run and runAsync so that, if used within onBeforeRun/Async\n// or onAfterRun/Async polluted entries won't matter and just\n// the native utilities will be available without seppuku.\n// The same applies if called within `onReady` worker hook.\nexport function patch(resolved, interpreter) {\n    const { run, runAsync } = registry.get(this.type);\n    return {\n        ...resolved,\n        run: run.bind(this, interpreter),\n        runAsync: runAsync.bind(this, interpreter)\n    };\n}\n\n/**\n * Created the wrapper to pass along hooked callbacks.\n * @param {object} module the details module\n * @param {object} ref the node or reference to pass as second argument\n * @param {boolean} isAsync if run should be async\n * @param {function?} before callback to run before\n * @param {function?} after callback to run after\n * @returns {object}\n */\nexport const polluteJS = (module, resolved, ref, isAsync, before, after) => {\n    if (before || after) {\n        const patched = patch.bind(module, resolved);\n        const name = isAsync ? 'runAsync' : 'run';\n        const method = module[name];\n        module[name] = isAsync ?\n            async function (interpreter, code, ...args) {\n                if (before) await before.call(this, patched(interpreter), ref);\n                const result = await method.call(\n                    this,\n                    interpreter,\n                    code,\n                    ...args\n                );\n                if (after) await after.call(this, patched(interpreter), ref);\n                return result;\n            } :\n            function (interpreter, code, ...args) {\n                if (before) before.call(this, patched(interpreter), ref);\n                const result = method.call(this, interpreter, code, ...args);\n                if (after) after.call(this, patched(interpreter), ref);\n                return result;\n            }\n        ;\n    }\n};\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { js as jsHooks, code as codeHooks } from '../hooks.js';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default class Hook {\n    constructor(interpreter, hooks = {}) {\n        const { main, worker } = hooks;\n        this.interpreter = interpreter;\n        this.onWorker = main?.onWorker;\n        // ignore onWorker as that's main only\n        for (const key of jsHooks.slice(1))\n            this[key] = worker?.[key];\n        for (const key of codeHooks)\n            this[key] = worker?.[key];\n    }\n    toJSON() {\n        const hooks = {};\n        // ignore onWorker as that's main only\n        for (const key of jsHooks.slice(1)) {\n            if (this[key]) hooks[key] = String(this[key]);\n        }\n        // code related: exclude `onReady` callback\n        for (const key of codeHooks) {\n            if (this[key]) hooks[key] = dedent(this[key]());\n        }\n        return hooks;\n    }\n}\n/* c8 ignore stop */\n","import * as JSON from '@ungap/structured-clone/json';\nimport coincident from 'coincident/window';\nimport xworker from './xworker.js';\nimport { getConfigURLAndType } from '../loader.js';\nimport { assign, create, defineProperties } from '../utils.js';\nimport { getText } from '../fetch-utils.js';\nimport Hook from './hook.js';\n\n/**\n * @typedef {Object} WorkerOptions custom configuration\n * @prop {string} type the interpreter type to use\n * @prop {string} [version] the optional interpreter version to use\n * @prop {string} [config] the optional config to use within such interpreter\n */\n\nexport default (...args) =>\n    /**\n     * A XWorker is a Worker facade able to bootstrap a channel with any desired interpreter.\n     * @param {string} url the remote file to evaluate on bootstrap\n     * @param {WorkerOptions} [options] optional arguments to define the interpreter to use\n     * @returns {Worker}\n     */\n    function XWorker(url, options) {\n        const worker = xworker();\n        const { postMessage } = worker;\n        const isHook = this instanceof Hook;\n\n        if (args.length) {\n            const [type, version] = args;\n            options = assign({}, options || { type, version });\n            if (!options.type) options.type = type;\n        }\n\n        // provide a base url to fetch or load config files from a Worker\n        // because there's no location at all in the Worker as it's embedded.\n        // fallback to a generic, ignored, config.txt file to still provide a URL.\n        const [ config ] = getConfigURLAndType(options.config);\n\n        const bootstrap = fetch(url)\n            .then(getText)\n            .then(code => {\n                const hooks = isHook ? this.toJSON() : void 0;\n                postMessage.call(worker, { options, config, code, hooks });\n            });\n\n        defineProperties(worker, {\n            postMessage: {\n                value: (data, ...rest) =>\n                    bootstrap.then(() =>\n                        postMessage.call(worker, data, ...rest),\n                    ),\n            },\n            sync: {\n                value: coincident(worker, JSON).proxy,\n            },\n            onerror: {\n                writable: true,\n                configurable: true,\n                value: console.error\n            }\n        });\n\n        worker.addEventListener('message', event => {\n            const { data } = event;\n            if (data instanceof Error) {\n                event.stopImmediatePropagation();\n                worker.onerror(create(event, {\n                    type: { value: 'error' },\n                    error: { value: data }\n                }));\n            }\n        });\n\n        if (isHook) this.onWorker?.(this.interpreter, worker);\n\n        return worker;\n    };\n","/* c8 ignore next */\nexport default () => new Worker(URL.createObjectURL(new Blob([\"const e=\\\"object\\\"==typeof self?self:globalThis,t=t=>((t,r)=>{const n=(e,r)=>(t.set(r,e),e),s=o=>{if(t.has(o))return t.get(o);const[a,i]=r[o];switch(a){case 0:case-1:return n(i,o);case 1:{const e=n([],o);for(const t of i)e.push(s(t));return e}case 2:{const e=n({},o);for(const[t,r]of i)e[s(t)]=s(r);return e}case 3:return n(new Date(i),o);case 4:{const{source:e,flags:t}=i;return n(new RegExp(e,t),o)}case 5:{const e=n(new Map,o);for(const[t,r]of i)e.set(s(t),s(r));return e}case 6:{const e=n(new Set,o);for(const t of i)e.add(s(t));return e}case 7:{const{name:t,message:r}=i;return n(new e[t](r),o)}case 8:return n(BigInt(i),o);case\\\"BigInt\\\":return n(Object(BigInt(i)),o)}return n(new e[a](i),o)};return s})(new Map,t)(0),r=\\\"\\\",{toString:n}={},{keys:s}=Object,o=e=>{const t=typeof e;if(\\\"object\\\"!==t||!e)return[0,t];const s=n.call(e).slice(8,-1);switch(s){case\\\"Array\\\":return[1,r];case\\\"Object\\\":return[2,r];case\\\"Date\\\":return[3,r];case\\\"RegExp\\\":return[4,r];case\\\"Map\\\":return[5,r];case\\\"Set\\\":return[6,r]}return s.includes(\\\"Array\\\")?[1,s]:s.includes(\\\"Error\\\")?[7,s]:[2,s]},a=([e,t])=>0===e&&(\\\"function\\\"===t||\\\"symbol\\\"===t),i=(e,{json:t,lossy:r}={})=>{const n=[];return((e,t,r,n)=>{const i=(e,t)=>{const s=n.push(e)-1;return r.set(t,s),s},c=n=>{if(r.has(n))return r.get(n);let[l,u]=o(n);switch(l){case 0:{let t=n;switch(u){case\\\"bigint\\\":l=8,t=n.toString();break;case\\\"function\\\":case\\\"symbol\\\":if(e)throw new TypeError(\\\"unable to serialize \\\"+u);t=null;break;case\\\"undefined\\\":return i([-1],n)}return i([l,t],n)}case 1:{if(u)return i([u,[...n]],n);const e=[],t=i([l,e],n);for(const t of n)e.push(c(t));return t}case 2:{if(u)switch(u){case\\\"BigInt\\\":return i([u,n.toString()],n);case\\\"Boolean\\\":case\\\"Number\\\":case\\\"String\\\":return i([u,n.valueOf()],n)}if(t&&\\\"toJSON\\\"in n)return c(n.toJSON());const r=[],f=i([l,r],n);for(const t of s(n))!e&&a(o(n[t]))||r.push([c(t),c(n[t])]);return f}case 3:return i([l,n.toISOString()],n);case 4:{const{source:e,flags:t}=n;return i([l,{source:e,flags:t}],n)}case 5:{const t=[],r=i([l,t],n);for(const[r,s]of n)(e||!a(o(r))&&!a(o(s)))&&t.push([c(r),c(s)]);return r}case 6:{const t=[],r=i([l,t],n);for(const r of n)!e&&a(o(r))||t.push(c(r));return r}}const{message:f}=n;return i([l,{name:u,message:f}],n)};return c})(!(t||r),!!t,new Map,n)(e),n},{parse:c,stringify:l}=JSON,u={json:!0,lossy:!0};var f=Object.freeze({__proto__:null,parse:e=>t(c(e)),stringify:e=>l(i(e,u))});const p=\\\"2b7f37dd-0f3c-4afb-a444-c83aed8deab7\\\",d=\\\"M\\\"+p,y=\\\"T\\\"+p,h=\\\"object\\\",g=\\\"function\\\",w=\\\"number\\\",m=\\\"string\\\",b=\\\"undefined\\\",v=\\\"symbol\\\";var $=e=>({value:new Promise((t=>{let r=new Worker(\\\"data:application/javascript,onmessage%3D(%7Bdata%3Ab%7D)%3D%3E(Atomics.wait(b%2C0)%2CpostMessage(0))\\\");r.onmessage=t,r.postMessage(e)}))})\\n/*! (c) Andrea Giammarchi - ISC */;const{Int32Array:S,Map:E,SharedArrayBuffer:A,Uint16Array:P}=globalThis,{BYTES_PER_ELEMENT:k}=S,{BYTES_PER_ELEMENT:x}=P,{isArray:M}=Array,{notify:j,wait:T,waitAsync:_}=Atomics,O=new WeakSet,W=new WeakMap,F={value:{then:e=>e()}};let R=0;const B=(e,{parse:t=JSON.parse,stringify:r=JSON.stringify,transform:n,interrupt:s}=JSON)=>{if(!W.has(e)){const o=(t,...r)=>e.postMessage({[p]:r},{transfer:t}),a=typeof s===g?s:s?.handler,i=s?.delay||42,c=new TextDecoder(\\\"utf-16\\\"),l=(e,t)=>e?(_||$)(t,0):(a?((e,t,r)=>{for(;\\\"timed-out\\\"===T(e,0,0,t);)r()})(t,i,a):T(t,0),F);let u=!1;W.set(e,new Proxy(new E,{has:(e,t)=>\\\"string\\\"==typeof t&&!t.startsWith(\\\"_\\\"),get:(r,s)=>\\\"then\\\"===s?null:(...r)=>{const a=R++;let i=new S(new A(2*k)),f=[];O.has(r.at(-1)||f)&&O.delete(f=r.pop()),o(f,a,i,s,n?r.map(n):r);const p=e!==globalThis;let d=0;return u&&p&&(d=setTimeout(console.warn,1e3,`💀🔒 - Possible deadlock if proxy.${s}(...args) is awaited`)),l(p,i).value.then((()=>{clearTimeout(d);const e=i[1];if(!e)return;const r=x*e;return i=new S(new A(r+r%k)),o([],a,i),l(p,i).value.then((()=>t(c.decode(new P(i.buffer).slice(0,e)))))}))},set(t,s,o){const a=typeof o;if(a!==g)throw new Error(`Unable to assign ${s} as ${a}`);if(!t.size){const s=new E;e.addEventListener(\\\"message\\\",(async e=>{const o=e.data?.[p];if(M(o)){e.stopImmediatePropagation();const[a,i,...c]=o;let l;if(c.length){const[e,o]=c;if(t.has(e)){u=!0;try{const c=await t.get(e)(...o);if(void 0!==c){const e=r(n?n(c):c);s.set(a,e),i[1]=e.length}}catch(e){l=e}finally{u=!1}}else l=new Error(`Unsupported action: ${e}`);i[0]=1}else{const e=s.get(a);s.delete(a);for(let t=new P(i.buffer),r=0;r<e.length;r++)t[r]=e.charCodeAt(r)}if(j(i,0),l)throw l}}))}return!!t.set(s,o)}}))}return W.get(e)};B.transfer=(...e)=>(O.add(e),e);const J=new FinalizationRegistry((([e,t,r])=>{r&&console.debug(`Held value ${String(t)} not relevant anymore`),e(t)})),I=Object.create(null),L=(e,t,{debug:r,return:n,token:s=e}=I)=>{const o=n||new Proxy(e,I),a=[o,[t,e,!!r]];return!1!==s&&a.push(s),J.register(...a),o},{defineProperty:D,getOwnPropertyDescriptor:C,getPrototypeOf:H,isExtensible:N,ownKeys:U,preventExtensions:z,set:q,setPrototypeOf:K}=Reflect,{assign:Y,create:G}=Object,V=H(Int8Array),Q=\\\"isArray\\\",X=(e,t)=>{const{get:r,set:n,value:s}=e;return r&&(e.get=t(r)),n&&(e.set=t(n)),s&&(e.value=t(s)),e},Z=(e,t)=>[e,t],ee=e=>t=>{const r=typeof t;switch(r){case h:if(null==t)return Z(\\\"null\\\",t);if(t===globalThis)return Z(h,null);case g:return e(r,t);case\\\"boolean\\\":case w:case m:case b:case\\\"bigint\\\":return Z(r,t);case v:if(te.has(t))return Z(r,te.get(t))}throw new Error(`Unable to handle this ${r} type`)},te=new Map(U(Symbol).filter((e=>typeof Symbol[e]===v)).map((e=>[Symbol[e],e]))),re=e=>{for(const[t,r]of te)if(r===e)return t},ne=e=>e;function se(){return this}const oe=\\\"apply\\\",ae=\\\"construct\\\",ie=\\\"defineProperty\\\",ce=\\\"deleteProperty\\\",le=\\\"get\\\",ue=\\\"getOwnPropertyDescriptor\\\",fe=\\\"getPrototypeOf\\\",pe=\\\"has\\\",de=\\\"isExtensible\\\",ye=\\\"ownKeys\\\",he=\\\"preventExtensions\\\",ge=\\\"set\\\",we=\\\"setPrototypeOf\\\",me=\\\"delete\\\";var be=((e,t)=>{const r=t&&new WeakMap;if(t){const{addEventListener:e}=EventTarget.prototype;D(EventTarget.prototype,\\\"addEventListener\\\",{value(t,n,...s){return s.at(0)?.invoke&&(r.has(this)||r.set(this,new Map),r.get(this).set(t,[].concat(s[0].invoke)),delete s[0].invoke),e.call(this,t,n,...s)}})}const n=t&&(e=>{const{currentTarget:t,target:n,type:s}=e;for(const o of r.get(t||n)?.get(s)||[])e[o]()});return function(r,s,o,...a){let i=0,c=this?.transform||ne;const l=new Map,u=new Map,{[o]:f}=r,p=a.length?Y(G(globalThis),...a):globalThis,d=ee(((e,t)=>{if(!l.has(t)){let r;for(;u.has(r=i++););l.set(t,r),u.set(r,e===h?c(t):t)}return Z(e,l.get(t))})),y=e=>{f(me,Z(m,e))},$=([e,r])=>{switch(e){case h:if(null==r)return p;if(typeof r===w)return u.get(r);if(!(r instanceof V))for(const e in r)r[e]=$(r[e]);return r;case g:if(typeof r===m){if(!u.has(r)){const e=function(...e){return t&&e.at(0)instanceof Event&&n(...e),f(oe,Z(g,r),d(this),e.map(d))};return u.set(r,new WeakRef(e)),L(r,y,{return:e,token:!1})}return u.get(r).deref()}return u.get(r);case v:return re(r)}return r},S={[oe]:(e,t,r)=>d(e.apply(t,r)),[ae]:(e,t)=>d(new e(...t)),[ie]:(e,t,r)=>d(D(e,t,r)),[ce]:(e,t)=>d(delete e[t]),[fe]:e=>d(H(e)),[le]:(e,t)=>d(e[t]),[ue]:(e,t)=>{const r=C(e,t);return r?Z(h,X(r,d)):Z(b,r)},[pe]:(e,t)=>d(t in e),[de]:e=>d(N(e)),[ye]:e=>Z(h,U(e).map(d)),[he]:e=>d(z(e)),[ge]:(e,t,r)=>d(q(e,t,r)),[we]:(e,t)=>d(K(e,t)),[me](e){l.delete(u.get(e)),u.delete(e)}};return r[s]=(e,t,...r)=>{switch(e){case oe:r[0]=$(r[0]),r[1]=r[1].map($);break;case ae:r[0]=r[0].map($);break;case ie:{const[e,t]=r;r[0]=$(e);const{get:n,set:s,value:o}=t;n&&(t.get=$(n)),s&&(t.set=$(s)),o&&(t.value=$(o));break}default:r=r.map($)}return S[e]($(t),...r)},{proxy:r,[e.toLowerCase()]:p,[`is${e}Proxy`]:()=>!1}}})(\\\"Window\\\",!0),ve=(e=>{let t=0;const r=new Map,n=new Map,s=Symbol(),o=e=>typeof e===g?e():e,a=e=>typeof e===h&&!!e&&s in e,i=Array[Q];return function(c,l,u){const f=this?.transform||ne,{[l]:p}=c,d=new Map,y=e=>{d.delete(e),p(me,b(e))},b=ee(((e,a)=>{if(s in a)return o(a[s]);if(e===g){if(a=f(a),!n.has(a)){let e;for(;n.has(e=String(t++)););r.set(a,e),n.set(e,a)}return Z(e,r.get(a))}if(!(a instanceof V)){e===h&&(a=f(a));for(const e in a)a[e]=b(a[e])}return Z(e,a)})),$=e=>{const[t,r]=e;if(!d.has(r)){const n=t===g?se.bind(e):e,s=new Proxy(n,A);return d.set(r,new WeakRef(s)),L(r,y,{return:s,token:!1})}return d.get(r).deref()},S=e=>{const[t,r]=e;switch(t){case h:return null===r?globalThis:typeof r===w?$(e):r;case g:return typeof r===m?n.get(r):$(e);case v:return re(r)}return r},E=(e,t,...r)=>S(p(e,o(t),...r)),A={[oe]:(e,t,r)=>E(oe,e,b(t),r.map(b)),[ae]:(e,t)=>E(ae,e,t.map(b)),[ie]:(e,t,r)=>{const{get:n,set:s,value:o}=r;return typeof n===g&&(r.get=b(n)),typeof s===g&&(r.set=b(s)),typeof o===g&&(r.value=b(o)),E(ie,e,b(t),r)},[ce]:(e,t)=>E(ce,e,b(t)),[fe]:e=>E(fe,e),[le]:(e,t)=>t===s?e:E(le,e,b(t)),[ue]:(e,t)=>{const r=E(ue,e,b(t));return r&&X(r,S)},[pe]:(e,t)=>t===s||E(pe,e,b(t)),[de]:e=>E(de,e),[ye]:e=>E(ye,e).map(S),[he]:e=>E(he,e),[ge]:(e,t,r)=>E(ge,e,b(t),b(r)),[we]:(e,t)=>E(we,e,b(t))};c[u]=(e,t,s,o)=>{switch(e){case oe:return S(t).apply(S(s),o.map(S));case me:{const e=S(t);r.delete(n.get(e)),n.delete(e)}}};const P=new Proxy([h,null],A),k=P.Array[Q];return D(Array,Q,{value:e=>a(e)?k(e):i(e)}),{[e.toLowerCase()]:P,[`is${e}Proxy`]:a,proxy:c}}})(\\\"Window\\\"),$e=typeof Worker===g?Worker:class{};const Se=new WeakMap,Ee=(e,...t)=>{const r=B(e,...t);if(!Se.has(r)){const n=e instanceof $e?be:ve;Se.set(r,n.call(t.at(0),r,d,y))}return Se.get(r)};Ee.transfer=B.transfer;const Ae={object(...e){return this.string(function(e){for(var t=e[0],r=1,n=arguments.length;r<n;r++)t+=arguments[r]+e[r];return t}(...e))},string(e){for(const t of e.split(/[\\\\r\\\\n]+/))if(t.trim().length){/^(\\\\s+)/.test(t)&&(e=e.replace(new RegExp(\\\"^\\\"+RegExp.$1,\\\"gm\\\"),\\\"\\\"));break}return e}};Promise.withResolvers||(Promise.withResolvers=function(){var e,t,r=new this((function(r,n){e=r,t=n}));return{resolve:e,reject:t,promise:r}});const Pe=e=>e.arrayBuffer(),ke=e=>e.json(),xe=e=>e.text(),Me=new WeakMap,je=e=>{const t=e||console,r={stderr:(t.stderr||console.error).bind(t),stdout:(t.stdout||console.log).bind(t)};return{stderr:(...e)=>r.stderr(...e),stdout:(...e)=>r.stdout(...e),async get(e){const t=await e;return Me.set(t,r),t}}},Te=({FS:e,PATH:t,PATH_FS:r},n,s)=>{const o=r.resolve(n);return e.mkdirTree(t.dirname(o)),e.writeFile(o,new Uint8Array(s),{canOwn:!0})},_e=e=>{const t=e.split(\\\"/\\\");return t.pop(),t.join(\\\"/\\\")},Oe=(e,t)=>{const r=[];for(const n of t.split(\\\"/\\\"))\\\".\\\"!==n&&(r.push(n),n&&e.mkdir(r.join(\\\"/\\\")))},We=(e,t)=>{const r=[];for(const e of t.split(\\\"/\\\"))switch(e){case\\\"\\\":case\\\".\\\":break;case\\\"..\\\":r.pop();break;default:r.push(e)}return[e.cwd()].concat(r).join(\\\"/\\\").replace(/^\\\\/+/,\\\"/\\\")},Fe=e=>{const t=e.map((e=>e.trim().replace(/(^[/]*|[/]*$)/g,\\\"\\\"))).filter((e=>\\\"\\\"!==e&&\\\".\\\"!==e)).join(\\\"/\\\");return e[0].startsWith(\\\"/\\\")?`/${t}`:t},Re=(e,t)=>fetch(Ve(t,Be.get(e))),Be=new WeakMap,Je=(e,t,r)=>Ye((e=>{for(const{files:t,to_file:r,from:n=\\\"\\\"}of e){if(void 0!==t&&void 0!==r)throw new Error(\\\"Cannot use 'to_file' and 'files' parameters together!\\\");if(void 0===t&&void 0===r&&n.endsWith(\\\"/\\\"))throw new Error(`Couldn't determine the filename from the path ${n}, please supply 'to_file' parameter.`)}return e.flatMap((({from:e=\\\"\\\",to_folder:t=\\\".\\\",to_file:r,files:n})=>{if(He(n))return n.map((r=>({url:Fe([e,r]),path:Fe([t,r])})));const s=r||e.slice(1+e.lastIndexOf(\\\"/\\\"));return[{url:e,path:Fe([t,s])}]}))})(r).map((({url:n,path:s})=>Re(r,n).then(Pe).then((r=>e.writeFile(t,s,r)))))),Ie=(e,t)=>t.endsWith(\\\"/\\\")?`${t}${e.split(\\\"/\\\").pop()}`:t,Le=(e,t)=>e.replace(/\\\\{.+?\\\\}/g,(e=>{if(!t.has(e))throw new SyntaxError(`Invalid template: ${e}`);return t.get(e)})),De=(e,t,r)=>Ye((e=>{const t=new Map,r=new Set,n=[];for(const[s,o]of Object.entries(e))if(/^\\\\{.+\\\\}$/.test(s)){if(t.has(s))throw new SyntaxError(`Duplicated template: ${s}`);t.set(s,Le(o,t))}else{const e=Le(s,t),a=Ie(e,Le(o||\\\"./\\\",t));if(r.has(a))throw new SyntaxError(`Duplicated destination: ${a}`);r.add(a),n.push({url:e,path:a})}return n})(r).map((({url:n,path:s})=>Re(r,n).then(Pe).then((r=>e.writeFile(t,s,r)))))),Ce=(e,...t)=>Ae[typeof e](e,...t),{isArray:He}=Array,{assign:Ne,create:Ue,defineProperties:ze,defineProperty:qe,entries:Ke}=Object,{all:Ye,resolve:Ge}=new Proxy(Promise,{get:(e,t)=>e[t].bind(e)}),Ve=(e,t=location.href)=>new URL(e,t.replace(/^blob:/,\\\"\\\")).href,Qe=(e,t,r,n=!1,s=CustomEvent)=>{e.dispatchEvent(new s(`${t}:${r}`,{bubbles:!0,detail:{worker:n}}))},Xe=e=>Function(`'use strict';return (${e})`)(),Ze=(e,t,r)=>{e.registerJsModule(t,r)},et=(e,t,...r)=>{try{return e.runPython(Ce(t),...r)}catch(t){Me.get(e).stderr(t)}},tt=async(e,t,...r)=>{try{return await e.runPythonAsync(Ce(t),...r)}catch(t){Me.get(e).stderr(t)}},rt=async(e,t,r)=>{const[n,...s]=t.split(\\\".\\\");let o,a=e.globals.get(n);for(const e of s)[o,a]=[a,a[e]];try{await a.call(o,r)}catch(t){Me.get(e).stderr(t)}};var nt={type:\\\"micropython\\\",module:(e=\\\"1.20.0-297\\\")=>`https://cdn.jsdelivr.net/npm/@micropython/micropython-webassembly-pyscript@${e}/micropython.mjs`,async engine({loadMicroPython:e},t,r){const{stderr:n,stdout:s,get:o}=je();r=r.replace(/\\\\.m?js$/,\\\".wasm\\\");const a=await o(e({stderr:n,stdout:s,url:r}));return t.files&&await De(this,a,t.files),t.fetch&&await Je(this,a,t.fetch),a},registerJSModule:Ze,run:et,runAsync:tt,runEvent:rt,transform:(e,t)=>t,writeFile:({FS:e,_module:{PATH:t,PATH_FS:r}},n,s)=>Te({FS:e,PATH:t,PATH_FS:r},n,s)};const st={dict_converter:Object.fromEntries};var ot={type:\\\"pyodide\\\",module:(e=\\\"0.24.1\\\")=>`https://cdn.jsdelivr.net/pyodide/v${e}/full/pyodide.mjs`,async engine({loadPyodide:e},t,r){const{stderr:n,stdout:s,get:o}=je(),a=r.slice(0,r.lastIndexOf(\\\"/\\\")),i=await o(e({stderr:n,stdout:s,indexURL:a}));if(t.files&&await De(this,i,t.files),t.fetch&&await Je(this,i,t.fetch),t.packages){await i.loadPackage(\\\"micropip\\\");const e=await i.pyimport(\\\"micropip\\\");await e.install(t.packages,{keep_going:!0}),e.destroy()}return i},registerJSModule:Ze,run:et,runAsync:tt,runEvent:rt,transform:(e,t)=>t instanceof e.ffi.PyProxy?t.toJs(st):t,writeFile:({FS:e,PATH:t,_module:{PATH_FS:r}},n,s)=>Te({FS:e,PATH:t,PATH_FS:r},n,s)};const at=\\\"ruby-wasm-wasi\\\",it=at.replace(/\\\\W+/g,\\\"_\\\");var ct={type:at,experimental:!0,module:(e=\\\"2.1.0\\\")=>`https://cdn.jsdelivr.net/npm/ruby-3_2-wasm-wasi@${e}/dist/browser.esm.js`,async engine({DefaultRubyVM:e},t,r){const n=await fetch(`${r.slice(0,r.lastIndexOf(\\\"/\\\"))}/ruby.wasm`),s=await WebAssembly.compile(await n.arrayBuffer()),{vm:o}=await e(s);return t.files&&await De(this,o,t.files),t.fetch&&await Je(this,o,t.fetch),o},registerJSModule(e,t,r){const n=`__module_${it}_${t}`;globalThis[n]=r,this.run(e,`require \\\"js\\\";$${t}=JS.global[:${n}]`),delete globalThis[n]},run:(e,t,...r)=>e.eval(Ce(t),...r),runAsync:(e,t,...r)=>e.evalAsync(Ce(t),...r),async runEvent(e,t,r){if(/^xworker\\\\.(on\\\\w+)$/.test(t)){const{$1:t}=RegExp,n=`__module_${it}_event`;globalThis[n]=r,this.run(e,`require \\\"js\\\";$xworker.call(\\\"${t}\\\",JS.global[:${n}])`),delete globalThis[n]}else{const n=this.run(e,`method(:${t})`);await n.call(t,e.wrap(r))}},transform:(e,t)=>t,writeFile:()=>{throw new Error(`writeFile is not supported in ${at}`)}};var lt={type:\\\"wasmoon\\\",module:(e=\\\"1.15.1\\\")=>`https://cdn.jsdelivr.net/npm/wasmoon@${e}/+esm`,async engine({LuaFactory:e,LuaLibraries:t},r){const{stderr:n,stdout:s,get:o}=je(),a=await o((new e).createEngine());return a.global.getTable(t.Base,(e=>{a.global.setField(e,\\\"print\\\",s),a.global.setField(e,\\\"printErr\\\",n)})),r.files&&await De(this,a,r.files),r.fetch&&await Je(this,a,r.fetch),a},registerJSModule:(e,t,r)=>{e.global.set(t,r)},run:(e,t,...r)=>{try{return e.doStringSync(Ce(t),...r)}catch(t){Me.get(e).stderr(t)}},runAsync:async(e,t,...r)=>{try{return await e.doString(Ce(t),...r)}catch(t){Me.get(e).stderr(t)}},runEvent:async(e,t,r)=>{const[n,...s]=t.split(\\\".\\\");let o,a=e.global.get(n);for(const e of s)[o,a]=[a,a[e]];try{await a.call(o,r)}catch(t){Me.get(e).stderr(t)}},transform:(e,t)=>t,writeFile:({cmodule:{module:{FS:e}}},t,r)=>((e,t,r)=>(Oe(e,_e(t)),t=We(e,t),e.writeFile(t,new Uint8Array(r),{canOwn:!0})))(e,t,r)};const ut=new Map,ft=new Map,pt=new Proxy(new Map,{get(e,t){if(!e.has(t)){const[r,...n]=t.split(\\\"@\\\"),s=ut.get(r),o=/^(?:\\\\.?\\\\.?\\\\/|https?:\\\\/\\\\/)/i.test(n)?n.join(\\\"@\\\"):s.module(...n);e.set(t,{url:o,module:import(o),engine:s.engine.bind(s)})}const{url:r,module:n,engine:s}=e.get(t);return(e,o)=>n.then((n=>{ft.set(t,e);for(const t of[\\\"files\\\",\\\"fetch\\\"]){const r=e?.[t];r&&Be.set(r,o)}return s(n,e,r)}))}}),dt=e=>{for(const t of[].concat(e.type))ut.set(t,e)};for(const e of[nt,ot,ct,lt])dt(e);const yt=async e=>(await import(\\\"https://cdn.jsdelivr.net/npm/basic-toml@0.3.1/es.js\\\")).parse(e),ht=(e,t,r={})=>{if(t){const[e,n]=(e=>{let t=typeof e;return\\\"string\\\"===t&&/\\\\.(json|toml|txt)$/.test(e)?t=RegExp.$1:e=\\\"./config.txt\\\",[Ve(e),t]})(t);if(\\\"json\\\"===n)r=fetch(e).then(ke);else if(\\\"toml\\\"===n)r=fetch(e).then(xe).then(yt);else if(\\\"string\\\"===n)try{r=JSON.parse(t)}catch(e){r=yt(t)}else\\\"object\\\"===n&&t&&(r=t);t=e}return Ge(r).then((r=>pt[e](r,t)))},gt=\\\"BeforeRun\\\",wt=\\\"AfterRun\\\",mt=[`code${gt}`,`code${gt}Async`,`code${wt}`,`code${wt}Async`],bt=[\\\"onWorker\\\",\\\"onReady\\\",`on${gt}`,`on${gt}Async`,`on${wt}`,`on${wt}Async`];function vt(e,t){const{run:r,runAsync:n}=ut.get(this.type);return{...e,run:r.bind(this,t),runAsync:n.bind(this,t)}}const $t=(e,t,r,n,s,o)=>{if(s||o){const a=vt.bind(e,t),i=n?\\\"runAsync\\\":\\\"run\\\",c=e[i];e[i]=n?async function(e,t,...n){s&&await s.call(this,a(e),r);const i=await c.call(this,e,t,...n);return o&&await o.call(this,a(e),r),i}:function(e,t,...n){s&&s.call(this,a(e),r);const i=c.call(this,e,t,...n);return o&&o.call(this,a(e),r),i}}};try{new SharedArrayBuffer(4)}catch(e){throw new Error([\\\"Unable to use SharedArrayBuffer due insecure environment.\\\",\\\"Please read requirements in MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\\\"].join(\\\"\\\\n\\\"))}let St,Et,At;const Pt=(e,t)=>{addEventListener(e,t||(async t=>{try{await St,Et(`xworker.on${e}`,t)}catch(e){postMessage(e)}}),!!t&&{once:!0})},{parse:kt,stringify:xt}=f,{proxy:Mt,window:jt,isWindowProxy:Tt}=Ee(self,{parse:kt,stringify:xt,transform:e=>At?At(e):e}),_t={sync:Mt,window:jt,isWindowProxy:Tt,onmessage:console.info,onerror:console.error,onmessageerror:console.warn,postMessage:postMessage.bind(self)};Pt(\\\"message\\\",(({data:{options:e,config:t,code:r,hooks:n}})=>{St=(async()=>{try{const{id:s,tag:o,type:a,custom:i,version:c,config:l,async:u}=e,f=await ht(((e,t=\\\"\\\")=>`${e}@${t}`.replace(/@$/,\\\"\\\"))(a,c),t,l),p=Ue(ut.get(a)),d=((e,t,r,n)=>({type:t,config:r,interpreter:n,io:Me.get(n),run:(t,...r)=>e.run(n,t,...r),runAsync:(t,...r)=>e.runAsync(n,t,...r),runEvent:(...t)=>e.runEvent(n,...t)}))(p,i||a,l,f);let y=\\\"run\\\";if(u&&(y+=\\\"Async\\\"),n){const e=((e,t)=>(r,n)=>{const s=e[t].bind(e);e[t]=(e,t,...o)=>s(e,`${n?r:t}\\\\n${n?t:r}`,...o)})(p,y);let t,r,s=\\\"\\\",o=\\\"\\\";for(const e of mt){const t=n[e];if(t){const r=e.endsWith(\\\"Async\\\");(r&&u||!r&&!u)&&(e.startsWith(\\\"codeBefore\\\")?s=t:o=t)}}o&&e(o,!1),s&&e(s,!0);for(const e of bt.slice(2)){const s=n[e];if(s){const n=e.endsWith(\\\"Async\\\");if(n&&u||!n&&!u){const n=Xe(s);e.startsWith(\\\"onBefore\\\")?t=n:r=n}}}$t(p,d,_t,u,t,r)}const{CustomEvent:h,document:g}=jt,w=s&&g.getElementById(s)||null,m=e=>Qe(w,i||a,e,!0,h);let b=\\\"\\\";return p.registerJSModule(f,\\\"polyscript\\\",{xworker:_t,get target(){return!b&&w&&(\\\"SCRIPT\\\"===o?w.after(Ne(g.createElement(`script-${i||a}`),{id:b=`${s}-target`})):(b=s,w.replaceChildren(),w.style.display=\\\"block\\\")),b}}),Et=p.runEvent.bind(p,f),At=p.transform.bind(p,f),w&&m(\\\"ready\\\"),n?.onReady&&Xe(n?.onReady).call(p,vt.call(p,d,f),_t),await p[y](f,r),w&&m(\\\"done\\\"),f}catch(e){postMessage(e)}})(),Pt(\\\"error\\\"),Pt(\\\"message\\\"),Pt(\\\"messageerror\\\")}));\\n\"],{type:'application/javascript'})),{type:'module'});","export const INVALID_CONTENT = 'Invalid content';\nexport const INVALID_SRC_ATTR = 'Invalid worker attribute';\nexport const INVALID_WORKER_ATTR = 'Invalid worker attribute';\n","import { INVALID_CONTENT, INVALID_SRC_ATTR, INVALID_WORKER_ATTR } from '../errors.js';\n\nimport { dedent, unescape } from '../utils.js';\n\nconst hasCommentsOnly = text => !text\n    .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n    .replace(/^\\s*(?:\\/\\/|#).*/gm, '')\n    .trim()\n;\n\n/* c8 ignore start */ // tested via integration\nexport default element => {\n  const { src, worker } = element.attributes;\n  if (worker) {\n      let { value } = worker;\n      // throw on worker values as ambiguous\n      // @see https://github.com/pyscript/polyscript/issues/43\n      if (value) throw new SyntaxError(INVALID_WORKER_ATTR);\n      value = src?.value;\n      if (!value) {\n          // throw on empty src attributes\n          if (src) throw new SyntaxError(INVALID_SRC_ATTR);\n          if (!element.childElementCount)\n              value = element.textContent;\n          else {\n              const { innerHTML, localName, type } = element;\n              const name = type || localName.replace(/-script$/, '');\n              value = unescape(innerHTML);\n              console.warn(\n                  `Deprecated: use <script type=\"${name}\"> for an always safe content parsing:\\n`,\n                  value,\n              );\n          }\n\n          const url = URL.createObjectURL(new Blob([dedent(value)], { type: 'text/plain' }));\n          // TODO: should we really clean up this? debugging non-existent resources\n          //       at distance might be very problematic if the url is revoked.\n          // setTimeout(URL.revokeObjectURL, 5000, url);\n          return url;\n      }\n      return value;\n  }\n  // validate ambiguous cases with src and not empty/commented content\n  if (src && !hasCommentsOnly(element.textContent))\n    throw new SyntaxError(INVALID_CONTENT);\n};\n/* c8 ignore stop */\n","import { $ } from 'basic-devtools';\n\nimport $xworker from './worker/class.js';\nimport workerURL from './worker/url.js';\nimport { getRuntime, getRuntimeID } from './loader.js';\nimport { registry } from './interpreters.js';\nimport { all, dispatch, resolve, defineProperty, nodeInfo } from './utils.js';\nimport { getText } from './fetch-utils.js';\n\nconst getRoot = (script) => {\n    let parent = script;\n    while (parent.parentNode) parent = parent.parentNode;\n    return parent;\n};\n\nexport const queryTarget = (script, idOrSelector) => {\n    const root = getRoot(script);\n    return root.getElementById(idOrSelector) || $(idOrSelector, root);\n};\n\nconst targets = new WeakMap();\nconst targetDescriptor = {\n    get() {\n        let target = targets.get(this);\n        if (!target) {\n            target = document.createElement(`${this.type}-script`);\n            targets.set(this, target);\n            handle(this);\n        }\n        return target;\n    },\n    set(target) {\n        if (typeof target === 'string')\n            targets.set(this, queryTarget(this, target));\n        else {\n            targets.set(this, target);\n            handle(this);\n        }\n    },\n};\n\nconst handled = new WeakMap();\n\nexport const interpreters = new Map();\n\nconst execute = async (script, source, XWorker, isAsync) => {\n    const { type } = script;\n    const module = registry.get(type);\n    /* c8 ignore start */\n    if (module.experimental)\n        console.warn(`The ${type} interpreter is experimental`);\n    const [interpreter, content] = await all([\n        handled.get(script).interpreter,\n        source,\n    ]);\n    try {\n        // temporarily override inherited document.currentScript in a non writable way\n        // but it deletes it right after to preserve native behavior (as it's sync: no trouble)\n        defineProperty(document, 'currentScript', {\n            configurable: true,\n            get: () => script,\n        });\n        module.registerJSModule(interpreter, 'polyscript', { XWorker });\n        dispatch(script, type, 'ready');\n        const result = module[isAsync ? 'runAsync' : 'run'](interpreter, content);\n        const done = dispatch.bind(null, script, type, 'done');\n        if (isAsync) result.then(done);\n        else done();\n        return result;\n    } finally {\n        delete document.currentScript;\n    }\n    /* c8 ignore stop */\n};\n\nconst getValue = (ref, prefix) => {\n    const value = ref?.value;\n    return value ? prefix + value : '';\n};\n\nexport const getDetails = (type, id, name, version, config, runtime = type) => {\n    if (!interpreters.has(id)) {\n        const details = {\n            interpreter: getRuntime(name, config),\n            queue: resolve(),\n            XWorker: $xworker(type, version),\n        };\n        interpreters.set(id, details);\n        // enable sane defaults when single interpreter *of kind* is used in the page\n        // this allows `xxx-*` attributes to refer to such interpreter without `env` around\n        /* c8 ignore start *//* this is tested very well in PyScript */\n        if (!interpreters.has(type)) interpreters.set(type, details);\n        if (!interpreters.has(runtime)) interpreters.set(runtime, details);\n        /* c8 ignore stopt */\n    }\n    return interpreters.get(id);\n};\n\n/**\n * @param {HTMLScriptElement} script a special type of <script>\n */\nexport const handle = async (script) => {\n    // known node, move its companion target after\n    // vDOM or other use cases where the script is a tracked element\n    if (handled.has(script)) {\n        const { target } = script;\n        if (target) {\n            // if the script is in the head just append target to the body\n            if (script.closest('head')) document.body.append(target);\n            // in any other case preserve the script position\n            else script.after(target);\n        }\n    }\n    // new script to handle ... allow newly created scripts to work\n    // just exactly like any other script would\n    else {\n        // allow a shared config among scripts, beside interpreter,\n        // and/or source code with different config or interpreter\n        const {\n            attributes: { async: isAsync, config, env, target, version },\n            src,\n            type,\n        } = script;\n\n        const versionValue = version?.value;\n        const name = getRuntimeID(type, versionValue);\n        let configValue = getValue(config, '|');\n        const id = getValue(env, '') || `${name}${configValue}`;\n        configValue = configValue.slice(1);\n\n        /* c8 ignore start */\n        const url = workerURL(script);\n        if (url) {\n            const XWorker = $xworker(type, versionValue);\n            const xworker = new XWorker(url, {\n                ...nodeInfo(script, type),\n                async: !!isAsync,\n                config: configValue\n            });\n            handled.set(\n                defineProperty(script, 'xworker', { value: xworker }),\n                { xworker }\n            );\n            return;\n        }\n        /* c8 ignore stop */\n\n        const targetValue = getValue(target, '');\n        const details = getDetails(type, id, name, versionValue, configValue);\n\n        handled.set(\n            defineProperty(script, 'target', targetDescriptor),\n            details,\n        );\n\n        if (targetValue) targets.set(script, queryTarget(script, targetValue));\n\n        // start fetching external resources ASAP\n        const source = src ? fetch(src).then(getText) : script.textContent;\n        details.queue = details.queue.then(() =>\n            execute(script, source, details.XWorker, !!isAsync),\n        );\n    }\n};\n","import { $x } from 'basic-devtools';\n\nimport { interpreters } from './script-handler.js';\nimport { all, create } from './utils.js';\nimport { registry, prefixes } from './interpreters.js';\n\nexport const env = new Proxy(create(null), {\n    get: (_, name) => new Promise(queueMicrotask).then(\n        () => awaitInterpreter(name)\n    ),\n});\n\n/* c8 ignore start */ // attributes are tested via integration / e2e\n// ensure both interpreter and its queue are awaited then returns the interpreter\nconst awaitInterpreter = async (key) => {\n    if (interpreters.has(key)) {\n        const { interpreter, queue } = interpreters.get(key);\n        return (await all([interpreter, queue]))[0];\n    }\n\n    const available = interpreters.size\n        ? `Available interpreters are: ${[...interpreters.keys()]\n              .map((r) => `\"${r}\"`)\n              .join(', ')}.`\n        : 'There are no interpreters in this page.';\n\n    throw new Error(`The interpreter \"${key}\" was not found. ${available}`);\n};\n\nexport const listener = async (event) => {\n    const { type, currentTarget } = event;\n    if (!prefixes.length) return;\n    for (let { name, value, ownerElement: el } of $x(\n        `./@*[${prefixes.map((p) => `name()=\"${p}${type}\"`).join(' or ')}]`,\n        currentTarget,\n    )) {\n        name = name.slice(0, -(type.length + 1));\n        const interpreter = await awaitInterpreter(\n            el.getAttribute(`${name}-env`) || name,\n        );\n        const handler = registry.get(name);\n        handler.runEvent(interpreter, value, event);\n    }\n};\n\n/**\n * Look for known prefixes and add related listeners.\n * @param {Document | Element} root\n */\nexport const addAllListeners = (root) => {\n    if (!prefixes.length) return;\n    for (let { name, ownerElement: el } of $x(\n        `.//@*[${prefixes\n            .map((p) => `starts-with(name(),\"${p}\")`)\n            .join(' or ')}]`,\n        root,\n    )) {\n        const i = name.lastIndexOf('-');\n        const type = name.slice(i + 1);\n        if (type !== 'env') {\n            el.addEventListener(type, listener);\n            // automatically disable form controls that are not disabled already\n            if ('disabled' in el && !el.disabled) {\n                el.disabled = true;\n                // set these to enable once the interpreter is known (registered + loaded)\n                env[name.slice(0, i)].then(() => {\n                    el.disabled = false;\n                });\n            }\n        }\n    }\n};\n/* c8 ignore stop */\n","import xworker from './worker/class.js';\nimport Hook from './worker/hook.js';\n\nconst XWorker = xworker();\n\nexport { Hook, XWorker };\n","import '@ungap/with-resolvers';\nimport { $$ } from 'basic-devtools';\n\nimport { assign, create, createOverload, createResolved, dedent, defineProperty, nodeInfo } from './utils.js';\nimport { getDetails } from './script-handler.js';\nimport { registry as defaultRegistry, prefixes, configs } from './interpreters.js';\nimport { getRuntimeID } from './loader.js';\nimport { addAllListeners } from './listeners.js';\nimport { Hook, XWorker } from './xworker.js';\nimport { polluteJS, js as jsHooks, code as codeHooks } from './hooks.js';\nimport workerURL from './worker/url.js';\n\nexport const CUSTOM_SELECTORS = [];\n\n/**\n * @typedef {Object} Runtime custom configuration\n * @prop {object} interpreter the bootstrapped interpreter\n * @prop {(url:string, options?: object) => Worker} XWorker an XWorker constructor that defaults to same interpreter on the Worker.\n * @prop {object} config a cloned config used to bootstrap the interpreter\n * @prop {(code:string) => any} run an utility to run code within the interpreter\n * @prop {(code:string) => Promise<any>} runAsync an utility to run code asynchronously within the interpreter\n * @prop {(path:string, data:ArrayBuffer) => void} writeFile an utility to write a file in the virtual FS, if available\n */\n\nconst types = new Map();\nconst waitList = new Map();\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\n/**\n * @param {Element} node any DOM element registered via define.\n */\nexport const handleCustomType = (node) => {\n    for (const selector of CUSTOM_SELECTORS) {\n        if (node.matches(selector)) {\n            const type = types.get(selector);\n            const details = registry.get(type);\n            const { resolve } = waitList.get(type);\n            const { options, known } = details;\n            if (!known.has(node)) {\n                known.add(node);\n                const {\n                    interpreter: runtime,\n                    config,\n                    version,\n                    env,\n                    onerror,\n                    hooks,\n                } = options;\n\n                let error;\n                try {\n                    const worker = workerURL(node);\n                    if (worker) {\n                        const xworker = XWorker.call(new Hook(null, hooks), worker, {\n                            ...nodeInfo(node, type),\n                            version,\n                            type: runtime,\n                            custom: type,\n                            config: node.getAttribute('config') || config || {},\n                            async: node.hasAttribute('async')\n                        });\n                        defineProperty(node, 'xworker', { value: xworker });\n                        resolve({ type, xworker });\n                        return;\n                    }\n                }\n                // let the custom type handle errors via its `io`\n                catch (workerError) {\n                    error = workerError;\n                }\n\n                const name = getRuntimeID(runtime, version);\n                const id = env || `${name}${config ? `|${config}` : ''}`;\n                const { interpreter: engine, XWorker: Worker } = getDetails(\n                    type,\n                    id,\n                    name,\n                    version,\n                    config,\n                    runtime\n                );\n                engine.then((interpreter) => {\n                    const module = create(defaultRegistry.get(runtime));\n\n                    const hook = new Hook(interpreter, hooks);\n\n                    const XWorker = function XWorker(...args) {\n                        return Worker.apply(hook, args);\n                    };\n\n                    const resolved = {\n                        ...createResolved(\n                            module,\n                            type,\n                            structuredClone(configs.get(name)),\n                            interpreter,\n                        ),\n                        XWorker,\n                    };\n\n                    module.registerJSModule(interpreter, 'polyscript', { XWorker });\n\n                    // patch methods accordingly to hooks (and only if needed)\n                    for (const suffix of ['Run', 'RunAsync']) {\n                        const overload = createOverload(module, `r${suffix.slice(1)}`);\n\n                        let before = '';\n                        let after = '';\n\n                        for (const key of codeHooks) {\n                            const value = hooks?.main?.[key];\n                            if (value && key.endsWith(suffix)) {\n                                if (key.startsWith('codeBefore'))\n                                    before = dedent(value());\n                                else\n                                    after = dedent(value());\n                            }\n                        }\n\n                        // append code that should be executed *after* first\n                        if (after) overload(after, false);\n\n                        // prepend code that should be executed *before* (so that after is post-patched)\n                        if (before) overload(before, true);\n\n                        let beforeCB, afterCB;\n                        // ignore onReady and onWorker\n                        for (let i = 2; i < jsHooks.length; i++) {\n                            const key = jsHooks[i];\n                            const value = hooks?.main?.[key];\n                            if (value && key.endsWith(suffix)) {\n                                if (key.startsWith('onBefore'))\n                                    beforeCB = value;\n                                else\n                                    afterCB = value;\n                            }\n                        }\n                        polluteJS(module, resolved, node, suffix.endsWith('Async'), beforeCB, afterCB);\n                    }\n\n                    details.queue = details.queue.then(() => {\n                        resolve(resolved);\n                        if (error) onerror?.(error, node);\n                        return hooks?.main?.onReady?.(resolved, node);\n                    });\n                });\n            }\n        }\n    }\n};\n\n/**\n * @type {Map<string, {options:object, known:WeakSet<Element>}>}\n */\nconst registry = new Map();\n\n/**\n * @typedef {Object} CustomOptions custom configuration\n * @prop {'pyodide' | 'micropython' | 'wasmoon' | 'ruby-wasm-wasi'} interpreter the interpreter to use\n * @prop {string} [version] the optional interpreter version to use\n * @prop {string} [config] the optional config to use within such interpreter\n */\n\nlet dontBotherCount = 0;\n\n/**\n * Allows custom types and components on the page to receive interpreters to execute any code\n * @param {string} type the unique `<script type=\"...\">` identifier\n * @param {CustomOptions} options the custom type configuration\n */\nexport const define = (type, options) => {\n    // allow no-type to be bootstrapped out of the box\n    let dontBother = type == null;\n\n    if (dontBother)\n        type = `_ps${dontBotherCount++}`;\n    else if (defaultRegistry.has(type) || registry.has(type))\n        throw new Error(`<script type=\"${type}\"> already registered`);\n\n    if (!defaultRegistry.has(options?.interpreter))\n        throw new Error('Unspecified interpreter');\n\n    // allows reaching out the interpreter helpers on events\n    defaultRegistry.set(type, defaultRegistry.get(options.interpreter));\n\n    // allows selector -> registry by type\n    const selectors = [`script[type=\"${type}\"]`];\n\n    // ensure a Promise can resolve once a custom type has been bootstrapped\n    whenDefined(type);\n\n    if (dontBother) {\n        // add a script then cleanup everything once that's ready\n        const { hooks } = options;\n        const onReady = hooks?.main?.onReady;\n        options = {\n            ...options,\n            hooks: {\n                ...hooks,\n                main: {\n                    ...hooks?.main,\n                    onReady(resolved, node) {\n                        CUSTOM_SELECTORS.splice(CUSTOM_SELECTORS.indexOf(type), 1);\n                        defaultRegistry.delete(type);\n                        registry.delete(type);\n                        waitList.delete(type);\n                        node.remove();\n                        onReady?.(resolved);\n                    }\n                }\n            },\n        };\n        document.head.append(\n            assign(document.createElement('script'), { type })\n        );\n    }\n    else {\n        selectors.push(`${type}-script`);\n        prefixes.push(`${type}-`);\n    }\n\n    for (const selector of selectors) types.set(selector, type);\n    CUSTOM_SELECTORS.push(...selectors);\n\n    // ensure always same env for this custom type\n    registry.set(type, {\n        options: assign({ env: type }, options),\n        known: new WeakSet(),\n        queue: Promise.resolve(),\n    });\n\n    if (!dontBother) addAllListeners(document);\n    $$(selectors.join(',')).forEach(handleCustomType);\n};\n\n/**\n * Resolves whenever a defined custom type is bootstrapped on the page\n * @param {string} type the unique `<script type=\"...\">` identifier\n * @returns {Promise<object>}\n */\nexport const whenDefined = (type) => {\n    if (!waitList.has(type)) waitList.set(type, Promise.withResolvers());\n    return waitList.get(type).promise;\n};\n/* c8 ignore stop */\n","import stickyModule from 'sticky-module';\nimport { $$ } from 'basic-devtools';\n\nimport { handle } from './script-handler.js';\nimport { assign } from './utils.js';\nimport { selectors, prefixes } from './interpreters.js';\nimport { CUSTOM_SELECTORS, handleCustomType } from './custom.js';\nimport { listener, addAllListeners } from './listeners.js';\n\nimport { define as $define, whenDefined as $whenDefined } from './custom.js';\nimport { env as $env } from './listeners.js';\nimport { Hook as $Hook, XWorker as $XWorker } from './xworker.js';\n\n// avoid multiple initialization of the same library\nconst [\n    {\n        define,\n        whenDefined,\n        env,\n        Hook,\n        XWorker\n    },\n    alreadyLive\n] = stickyModule(\n    'polyscript',\n    {\n        define: $define,\n        whenDefined: $whenDefined,\n        env: $env,\n        Hook: $Hook,\n        XWorker: $XWorker\n    }\n);\n\nexport { define, whenDefined, env, Hook, XWorker };\nexport * from './errors.js';\n\n\nif (!alreadyLive) {\n    const mo = new MutationObserver((records) => {\n        const selector = selectors.join(',');\n        for (const { type, target, attributeName, addedNodes } of records) {\n            // attributes are tested via integration / e2e\n            /* c8 ignore start */\n            if (type === 'attributes') {\n                const i = attributeName.lastIndexOf('-') + 1;\n                if (i) {\n                    const prefix = attributeName.slice(0, i);\n                    for (const p of prefixes) {\n                        if (prefix === p) {\n                            const type = attributeName.slice(i);\n                            if (type !== 'env') {\n                                const method = target.hasAttribute(attributeName)\n                                    ? 'add'\n                                    : 'remove';\n                                target[`${method}EventListener`](type, listener);\n                            }\n                            break;\n                        }\n                    }\n                }\n                continue;\n            }\n            for (const node of addedNodes) {\n                if (node.nodeType === 1) {\n                    addAllListeners(node);\n                    if (selector && node.matches(selector)) handle(node);\n                    else bootstrap(selector, node, true);\n                }\n            }\n            /* c8 ignore stop */\n        }\n    });\n\n    /* c8 ignore start */\n    const bootstrap = (selector, node, shouldHandle) => {\n        if (selector) $$(selector, node).forEach(handle);\n        selector = CUSTOM_SELECTORS.join(',');\n        if (selector) {\n            if (shouldHandle) handleCustomType(node);\n            $$(selector, node).forEach(handleCustomType);\n        }\n    };\n    /* c8 ignore stop */\n\n    const observe = (root) => {\n        mo.observe(root, { childList: true, subtree: true, attributes: true });\n        return root;\n    };\n\n    const { attachShadow } = Element.prototype;\n    assign(Element.prototype, {\n        attachShadow(init) {\n            return observe(attachShadow.call(this, init));\n        },\n    });\n\n    // give 3rd party a chance to apply changes before this happens\n    queueMicrotask(() => {\n        addAllListeners(observe(document));\n        bootstrap(selectors.join(','), document, false);\n    });\n\n}\n","export default new Map([\n    [\"py\", \"pyodide\"],\n    [\"mpy\", \"micropython\"],\n]);\n","import TYPES from \"./types.js\";\n\nconst waitForIt = [];\n\nfor (const [TYPE] of TYPES) {\n    const selectors = [`script[type=\"${TYPE}\"]`, `${TYPE}-script`];\n    for (const element of document.querySelectorAll(selectors.join(\",\"))) {\n        const { promise, resolve } = Promise.withResolvers();\n        waitForIt.push(promise);\n        element.addEventListener(`${TYPE}:done`, resolve, { once: true });\n    }\n}\n\n// wait for all the things then cleanup\nPromise.all(waitForIt).then(() => {\n    dispatchEvent(new Event(\"py:all-done\"));\n});\n","// ⚠️ This file is an artifact: DO NOT MODIFY\nexport default {\n    error: () => import(/* webpackIgnore: true */ \"./plugins/error.js\"),\n    [\"py-terminal\"]: () => import(/* webpackIgnore: true */ \"./plugins/py-terminal.js\"),\n};\n","import { assign } from \"polyscript/exports\";\n\nconst CLOSEBUTTON =\n    \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='currentColor' width='12px'><path d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/></svg>\";\n\n/**\n * These error codes are used to identify the type of error that occurred.\n * @see https://docs.pyscript.net/latest/reference/exceptions.html?highlight=errors\n */\nexport const ErrorCode = {\n    GENERIC: \"PY0000\", // Use this only for development then change to a more specific error code\n    CONFLICTING_CODE: \"PY0409\",\n    BAD_CONFIG: \"PY1000\",\n    MICROPIP_INSTALL_ERROR: \"PY1001\",\n    BAD_PLUGIN_FILE_EXTENSION: \"PY2000\",\n    NO_DEFAULT_EXPORT: \"PY2001\",\n    TOP_LEVEL_AWAIT: \"PY9000\",\n    // Currently these are created depending on error code received from fetching\n    FETCH_ERROR: \"PY0001\",\n    FETCH_NAME_ERROR: \"PY0002\",\n    FETCH_UNAUTHORIZED_ERROR: \"PY0401\",\n    FETCH_FORBIDDEN_ERROR: \"PY0403\",\n    FETCH_NOT_FOUND_ERROR: \"PY0404\",\n    FETCH_SERVER_ERROR: \"PY0500\",\n    FETCH_UNAVAILABLE_ERROR: \"PY0503\",\n};\n\n/**\n * Keys of the ErrorCode object\n * @typedef {keyof ErrorCode} ErrorCodes\n * */\n\nexport class UserError extends Error {\n    /**\n     * @param {ErrorCodes} errorCode\n     * @param {string} message\n     * @param {string} messageType\n     * */\n    constructor(errorCode, message = \"\", messageType = \"text\") {\n        super(`(${errorCode}): ${message}`);\n        this.errorCode = errorCode;\n        this.messageType = messageType;\n        this.name = \"UserError\";\n    }\n}\n\nexport class FetchError extends UserError {\n    /**\n     * @param {ErrorCodes} errorCode\n     * @param {string} message\n     * */\n    constructor(errorCode, message) {\n        super(errorCode, message);\n        this.name = \"FetchError\";\n    }\n}\n\nexport class InstallError extends UserError {\n    /**\n     * @param {ErrorCodes} errorCode\n     * @param {string} message\n     * */\n    constructor(errorCode, message) {\n        super(errorCode, message);\n        this.name = \"InstallError\";\n    }\n}\n\n/**\n * Internal function for creating alert banners on the page\n * @param {string} message The message to be displayed to the user\n * @param {string} level The alert level of the message. Can be any string; 'error' or 'warning' cause matching messages to be emitted to the console\n * @param {string} [messageType=\"text\"] If set to \"html\", the message content will be assigned to the banner's innerHTML directly, instead of its textContent\n * @param {any} [logMessage=true] An additional flag for whether the message should be sent to the console log.\n */\nexport function _createAlertBanner(\n    message,\n    level,\n    messageType = \"text\",\n    logMessage = true,\n) {\n    switch (`log-${level}-${logMessage}`) {\n        case \"log-error-true\":\n            console.error(message);\n            break;\n        case \"log-warning-true\":\n            console.warn(message);\n            break;\n    }\n\n    const content = messageType === \"html\" ? \"innerHTML\" : \"textContent\";\n    const banner = assign(document.createElement(\"div\"), {\n        className: `alert-banner py-${level}`,\n        [content]: message,\n    });\n\n    if (level === \"warning\") {\n        const closeButton = assign(document.createElement(\"button\"), {\n            id: \"alert-close-button\",\n            innerHTML: CLOSEBUTTON,\n        });\n\n        banner.appendChild(closeButton).addEventListener(\"click\", () => {\n            banner.remove();\n        });\n    }\n\n    document.body.prepend(banner);\n}\n","import { FetchError, ErrorCode } from \"./exceptions.js\";\nimport { getText } from \"polyscript/exports\";\n\nexport { getText };\n\n/**\n * This is a fetch wrapper that handles any non 200 responses and throws a\n * FetchError with the right ErrorCode. This is useful because our FetchError\n * will automatically create an alert banner.\n *\n * @param {string} url - URL to fetch\n * @param {Request} [options] - options to pass to fetch\n * @returns {Promise<Response>}\n */\nexport async function robustFetch(url, options) {\n    let response;\n\n    // Note: We need to wrap fetch into a try/catch block because fetch\n    // throws a TypeError if the URL is invalid such as http://blah.blah\n    try {\n        response = await fetch(url, options);\n    } catch (err) {\n        const error = err;\n        let errMsg;\n        if (url.startsWith(\"http\")) {\n            errMsg =\n                `Fetching from URL ${url} failed with error ` +\n                `'${error.message}'. Are your filename and path correct?`;\n        } else {\n            errMsg = `Polyscript: Access to local files\n        (using [[fetch]] configurations in &lt;py-config&gt;)\n        is not available when directly opening a HTML file;\n        you must use a webserver to serve the additional files.\n        See <a style=\"text-decoration: underline;\" href=\"https://github.com/pyscript/pyscript/issues/257#issuecomment-1119595062\">this reference</a>\n        on starting a simple webserver with Python.\n            `;\n        }\n        throw new FetchError(ErrorCode.FETCH_ERROR, errMsg);\n    }\n\n    // Note that response.ok is true for 200-299 responses\n    if (!response.ok) {\n        const errorMsg = `Fetching from URL ${url} failed with error ${response.status} (${response.statusText}). Are your filename and path correct?`;\n        switch (response.status) {\n            case 404:\n                throw new FetchError(ErrorCode.FETCH_NOT_FOUND_ERROR, errorMsg);\n            case 401:\n                throw new FetchError(\n                    ErrorCode.FETCH_UNAUTHORIZED_ERROR,\n                    errorMsg,\n                );\n            case 403:\n                throw new FetchError(ErrorCode.FETCH_FORBIDDEN_ERROR, errorMsg);\n            case 500:\n                throw new FetchError(ErrorCode.FETCH_SERVER_ERROR, errorMsg);\n            case 503:\n                throw new FetchError(\n                    ErrorCode.FETCH_UNAVAILABLE_ERROR,\n                    errorMsg,\n                );\n            default:\n                throw new FetchError(ErrorCode.FETCH_ERROR, errorMsg);\n        }\n    }\n    return response;\n}\n","/**\n * This file parses a generic <py-config> or config attribute\n * to use as base config for all py-script elements, importing\n * also a queue of plugins *before* the interpreter (if any) resolves.\n */\nimport { $ } from \"basic-devtools\";\n\nimport TYPES from \"./types.js\";\nimport allPlugins from \"./plugins.js\";\nimport { robustFetch as fetch, getText } from \"./fetch.js\";\nimport { ErrorCode } from \"./exceptions.js\";\n\nconst badURL = (url, expected = \"\") => {\n    let message = `(${ErrorCode.BAD_CONFIG}): Invalid URL: ${url}`;\n    if (expected) message += `\\nexpected ${expected} content`;\n    throw new Error(message);\n};\n\n/**\n * Given a string, returns its trimmed content as text,\n * fetching it from a file if the content is a URL.\n * @param {string} config either JSON, TOML, or a file to fetch\n * @param {string?} type the optional type to enforce\n * @returns {{json: boolean, toml: boolean, text: string}}\n */\nconst configDetails = async (config, type) => {\n    let text = config?.trim();\n    // we only support an object as root config\n    let url = \"\",\n        toml = false,\n        json = /^{/.test(text) && /}$/.test(text);\n    // handle files by extension (relaxing urls parts after)\n    if (!json && /\\.(\\w+)(?:\\?\\S*)?$/.test(text)) {\n        const ext = RegExp.$1;\n        if (ext === \"json\" && type !== \"toml\") json = true;\n        else if (ext === \"toml\" && type !== \"json\") toml = true;\n        else badURL(text, type);\n        url = text;\n        text = (await fetch(url).then(getText)).trim();\n    }\n    return { json, toml: toml || (!json && !!text), text, url };\n};\n\nconst syntaxError = (type, url, { message }) => {\n    let str = `(${ErrorCode.BAD_CONFIG}): Invalid ${type}`;\n    if (url) str += ` @ ${url}`;\n    return new SyntaxError(`${str}\\n${message}`);\n};\n\nconst configs = new Map();\n\nfor (const [TYPE] of TYPES) {\n    /** @type {Promise<[...any]>} A Promise wrapping any plugins which should be loaded. */\n    let plugins;\n\n    /** @type {any} The PyScript configuration parsed from the JSON or TOML object*. May be any of the return types of JSON.parse() or toml-j0.4's parse() ( {number | string | boolean | null | object | Array} ) */\n    let parsed;\n\n    /** @type {SyntaxError | undefined} The error thrown when parsing the PyScript config, if any.*/\n    let error;\n\n    let config,\n        type,\n        pyConfig = $(`${TYPE}-config`);\n    if (pyConfig) {\n        config = pyConfig.getAttribute(\"src\") || pyConfig.textContent;\n        type = pyConfig.getAttribute(\"type\");\n    } else {\n        pyConfig = $(\n            [\n                `script[type=\"${TYPE}\"][config]:not([worker])`,\n                `${TYPE}-script[config]:not([worker])`,\n            ].join(\",\"),\n        );\n        if (pyConfig) config = pyConfig.getAttribute(\"config\");\n    }\n\n    // catch possible fetch errors\n    if (config) {\n        try {\n            const { json, toml, text, url } = await configDetails(config, type);\n            config = text;\n            if (json || type === \"json\") {\n                try {\n                    parsed = JSON.parse(text);\n                } catch (e) {\n                    error = syntaxError(\"JSON\", url, e);\n                }\n            } else if (toml || type === \"toml\") {\n                try {\n                    const { parse } = await import(\n                        /* webpackIgnore: true */ \"./3rd-party/toml.js\"\n                    );\n                    parsed = parse(text);\n                } catch (e) {\n                    error = syntaxError(\"TOML\", url, e);\n                }\n            }\n        } catch (e) {\n            error = e;\n        }\n    }\n\n    // parse all plugins and optionally ignore only\n    // those flagged as \"undesired\" via `!` prefix\n    const toBeAwaited = [];\n    for (const [key, value] of Object.entries(allPlugins)) {\n        if (error) {\n            if (key === \"error\") {\n                // show on page the config is broken, meaning that\n                // it was not possible to disable error plugin neither\n                // as that part wasn't correctly parsed anyway\n                value().then(({ notify }) => notify(error.message));\n            }\n        } else if (!parsed?.plugins?.includes(`!${key}`)) {\n            toBeAwaited.push(value().then(({ default: p }) => p));\n        }\n    }\n\n    // assign plugins as Promise.all only if needed\n    plugins = Promise.all(toBeAwaited);\n\n    configs.set(TYPE, { config: parsed, plugins, error });\n}\n\nexport default configs;\n","export default {\n    /**\n     * 'Sleep' for the given number of seconds. Used to implement Python's time.sleep in Worker threads.\n     * @param {number} seconds The number of seconds to sleep.\n     */\n    sleep(seconds) {\n        return new Promise(($) => setTimeout($, seconds * 1000));\n    },\n};\n","import { defineProperty } from \"polyscript/exports\";\n\n// helper for all script[type=\"py\"] out there\nconst before = (script) => {\n    defineProperty(document, \"currentScript\", {\n        configurable: true,\n        get: () => script,\n    });\n};\n\nconst after = () => {\n    delete document.currentScript;\n};\n\n// common life-cycle handlers for any node\nexport default async (main, wrap, element, hook) => {\n    const isAsync = hook.endsWith(\"Async\");\n    const isBefore = hook.startsWith(\"onBefore\");\n    // make it possible to reach the current target node via Python\n    // or clean up for other scripts executing around this one\n    (isBefore ? before : after)(element);\n    for (const fn of main(hook)) {\n        if (isAsync) await fn(wrap, element);\n        else fn(wrap, element);\n    }\n};\n","const any = () => true;\nconst error = message => {\n  throw new TypeError(message);\n};\n\nconst validator = (type, Class) => {\n  const checks = [];\n  if (type) {\n    for (const t of type.split(/\\s*\\|\\s*/)) {\n      if (t === 'object')\n        checks.push(v => v !== null && typeof v === t);\n      else if (t === 'null')\n        checks.push(v => v === null);\n      else\n        checks.push(v => typeof v === t);\n    }\n  }\n  if (Class) {\n    for (const C of [].concat(Class))\n      checks.push(o => o instanceof C);\n  }\n  switch (checks.length) {\n    case 0: return any;\n    case 1: return checks[0];\n    default: return v => checks.some(f => f(v));\n  }\n};\n\nconst failure = (type, Class, kind, onerror = error) => value => {\n  const message = [`Invalid ${typeof value} ${kind}: expected `];\n  if (type) {\n    message.push(type);\n    if (Class) message.push(' or ');\n  }\n  if (Class) {\n    message.push('an instanceof ');\n    message.push([].concat(Class).map(({name}) => name).join(' | '));\n  }\n  onerror(message.join(''), value);\n};\n\nconst checkFail = (options, kind = 'value') => {\n  const type = options?.typeof;\n  const Class = options?.instanceof;\n  return [\n    validator(type, Class),\n    failure(type, Class, kind, options?.onerror)\n  ];\n};\n\nconst createSet = Set => options => {\n  const [check, fail] = checkFail(options);\n  return class TypedSet extends Set {\n    add(value) {\n      return check(value) ? super.add(value) : fail(value);\n    }\n  };\n};\n\nexport const typedSet = createSet(Set);\nexport const typedWeakSet = createSet(WeakSet);\n\nconst createMap = Map => ([keyOptions, valueOptions]) => {\n  const [checkKey, failKey] = checkFail(keyOptions, 'key');\n  const [checkValue, failValue] = checkFail(valueOptions);\n  return class TypedMap extends Map {\n    set(key, value) {\n      if (!checkKey(key)) failKey(key);\n      if (!checkValue(value)) failValue(value);\n      return super.set(key, value);\n    }\n  };\n};\n\nexport const typedMap = createMap(Map);\nexport const typedWeakMap = createMap(WeakMap);\n","export default function (callback = this) {\n  return String(callback).replace(\n    /^(async\\s*)?(\\bfunction\\b)?(.*?)\\(/,\n    (_, isAsync, fn, name) => (\n      name && !fn ?\n        `${isAsync || \"\"}function ${name}(` :\n        _\n    ),\n  );\n};\n","/**\n * Create through Python the pyscript module through\n * the artifact generated at build time.\n * This the returned value is a string that must be used\n * either before a worker execute code or when the module\n * is registered on the main thread.\n */\n\nimport pyscript from \"./stdlib/pyscript.js\";\n\nconst { entries } = Object;\n\nconst python = [\n    \"import os as _os\",\n    \"from pathlib import Path as _Path\",\n    \"_path = None\",\n];\n\nconst write = (base, literal) => {\n    for (const [key, value] of entries(literal)) {\n        python.push(`_path = _Path(\"${base}/${key}\")`);\n        if (typeof value === \"string\") {\n            const code = JSON.stringify(value);\n            python.push(`_path.write_text(${code})`);\n        } else {\n            // @see https://github.com/pyscript/pyscript/pull/1813#issuecomment-1781502909\n            python.push(`if not _os.path.exists(\"${base}/${key}\"):`);\n            python.push(\"    _path.mkdir(parents=True, exist_ok=True)\");\n            write(`${base}/${key}`, value);\n        }\n    }\n};\n\nwrite(\".\", pyscript);\n\npython.push(\"del _Path\");\npython.push(\"del _path\");\npython.push(\"del _os\");\npython.push(\"\\n\");\n\nexport default python.join(\"\\n\");\n","// ⚠️ This file is an artifact: DO NOT MODIFY\nexport default {\n  \"pyscript\": {\n    \"__init__.py\": \"# Some notes about the naming conventions and the relationship between various\\n# similar-but-different names.\\n#\\n# import pyscript\\n#     this package contains the main user-facing API offered by pyscript. All\\n#     the names which are supposed be used by end users should be made\\n#     available in pyscript/__init__.py (i.e., this file)\\n#\\n# import _pyscript\\n#     this is an internal module implemented in JS. It is used internally by\\n#     the pyscript package, end users should not use it directly. For its\\n#     implementation, grep for `interpreter.registerJsModule(\\\"_pyscript\\\",\\n#     ...)` in core.js\\n#\\n# import js\\n#     this is the JS globalThis, as exported by pyodide and/or micropython's\\n#     FFIs. As such, it contains different things in the main thread or in a\\n#     worker.\\n#\\n# import pyscript.magic_js\\n#     this submodule abstracts away some of the differences between the main\\n#     thread and the worker. In particular, it defines `window` and `document`\\n#     in such a way that these names work in both cases: in the main thread,\\n#     they are the \\\"real\\\" objects, in the worker they are proxies which work\\n#     thanks to coincident.\\n#\\n# from pyscript import window, document\\n#     these are just the window and document objects as defined by\\n#     pyscript.magic_js. This is the blessed way to access them from pyscript,\\n#     as it works transparently in both the main thread and worker cases.\\n\\nfrom pyscript.display import HTML, display\\nfrom pyscript.magic_js import (\\n    RUNNING_IN_WORKER,\\n    PyWorker,\\n    current_target,\\n    document,\\n    sync,\\n    window,\\n)\\n\\ntry:\\n    from pyscript.event_handling import when\\nexcept:\\n    from pyscript.util import NotSupported\\n\\n    when = NotSupported(\\n        \\\"pyscript.when\\\", \\\"pyscript.when currently not available with this interpreter\\\"\\n    )\\n\",\n    \"display.py\": \"import base64\\nimport html\\nimport io\\nimport re\\n\\nfrom pyscript.magic_js import current_target, document, window\\n\\n_MIME_METHODS = {\\n    \\\"__repr__\\\": \\\"text/plain\\\",\\n    \\\"_repr_html_\\\": \\\"text/html\\\",\\n    \\\"_repr_markdown_\\\": \\\"text/markdown\\\",\\n    \\\"_repr_svg_\\\": \\\"image/svg+xml\\\",\\n    \\\"_repr_pdf_\\\": \\\"application/pdf\\\",\\n    \\\"_repr_jpeg_\\\": \\\"image/jpeg\\\",\\n    \\\"_repr_png_\\\": \\\"image/png\\\",\\n    \\\"_repr_latex\\\": \\\"text/latex\\\",\\n    \\\"_repr_json_\\\": \\\"application/json\\\",\\n    \\\"_repr_javascript_\\\": \\\"application/javascript\\\",\\n    \\\"savefig\\\": \\\"image/png\\\",\\n}\\n\\n\\ndef _render_image(mime, value, meta):\\n    # If the image value is using bytes we should convert it to base64\\n    # otherwise it will return raw bytes and the browser will not be able to\\n    # render it.\\n    if isinstance(value, bytes):\\n        value = base64.b64encode(value).decode(\\\"utf-8\\\")\\n\\n    # This is the pattern of base64 strings\\n    base64_pattern = re.compile(\\n        r\\\"^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$\\\"\\n    )\\n    # If value doesn't match the base64 pattern we should encode it to base64\\n    if len(value) > 0 and not base64_pattern.match(value):\\n        value = base64.b64encode(value.encode(\\\"utf-8\\\")).decode(\\\"utf-8\\\")\\n\\n    data = f\\\"data:{mime};charset=utf-8;base64,{value}\\\"\\n    attrs = \\\" \\\".join(['{k}=\\\"{v}\\\"' for k, v in meta.items()])\\n    return f'<img src=\\\"{data}\\\" {attrs}></img>'\\n\\n\\ndef _identity(value, meta):\\n    return value\\n\\n\\n_MIME_RENDERERS = {\\n    \\\"text/plain\\\": html.escape,\\n    \\\"text/html\\\": _identity,\\n    \\\"image/png\\\": lambda value, meta: _render_image(\\\"image/png\\\", value, meta),\\n    \\\"image/jpeg\\\": lambda value, meta: _render_image(\\\"image/jpeg\\\", value, meta),\\n    \\\"image/svg+xml\\\": _identity,\\n    \\\"application/json\\\": _identity,\\n    \\\"application/javascript\\\": lambda value, meta: f\\\"<script>{value}<\\\\\\\\/script>\\\",\\n}\\n\\n\\nclass HTML:\\n    \\\"\\\"\\\"\\n    Wrap a string so that display() can render it as plain HTML\\n    \\\"\\\"\\\"\\n\\n    def __init__(self, html):\\n        self._html = html\\n\\n    def _repr_html_(self):\\n        return self._html\\n\\n\\ndef _eval_formatter(obj, print_method):\\n    \\\"\\\"\\\"\\n    Evaluates a formatter method.\\n    \\\"\\\"\\\"\\n    if print_method == \\\"__repr__\\\":\\n        return repr(obj)\\n    elif hasattr(obj, print_method):\\n        if print_method == \\\"savefig\\\":\\n            buf = io.BytesIO()\\n            obj.savefig(buf, format=\\\"png\\\")\\n            buf.seek(0)\\n            return base64.b64encode(buf.read()).decode(\\\"utf-8\\\")\\n        return getattr(obj, print_method)()\\n    elif print_method == \\\"_repr_mimebundle_\\\":\\n        return {}, {}\\n    return None\\n\\n\\ndef _format_mime(obj):\\n    \\\"\\\"\\\"\\n    Formats object using _repr_x_ methods.\\n    \\\"\\\"\\\"\\n    if isinstance(obj, str):\\n        return html.escape(obj), \\\"text/plain\\\"\\n\\n    mimebundle = _eval_formatter(obj, \\\"_repr_mimebundle_\\\")\\n    if isinstance(mimebundle, tuple):\\n        format_dict, _ = mimebundle\\n    else:\\n        format_dict = mimebundle\\n\\n    output, not_available = None, []\\n    for method, mime_type in reversed(_MIME_METHODS.items()):\\n        if mime_type in format_dict:\\n            output = format_dict[mime_type]\\n        else:\\n            output = _eval_formatter(obj, method)\\n\\n        if output is None:\\n            continue\\n        elif mime_type not in _MIME_RENDERERS:\\n            not_available.append(mime_type)\\n            continue\\n        break\\n    if output is None:\\n        if not_available:\\n            window.console.warn(\\n                f\\\"Rendered object requested unavailable MIME renderers: {not_available}\\\"\\n            )\\n        output = repr(output)\\n        mime_type = \\\"text/plain\\\"\\n    elif isinstance(output, tuple):\\n        output, meta = output\\n    else:\\n        meta = {}\\n    return _MIME_RENDERERS[mime_type](output, meta), mime_type\\n\\n\\ndef _write(element, value, append=False):\\n    html, mime_type = _format_mime(value)\\n    if html == \\\"\\\\\\\\n\\\":\\n        return\\n\\n    if append:\\n        out_element = document.createElement(\\\"div\\\")\\n        element.append(out_element)\\n    else:\\n        out_element = element.lastElementChild\\n        if out_element is None:\\n            out_element = element\\n\\n    if mime_type in (\\\"application/javascript\\\", \\\"text/html\\\"):\\n        script_element = document.createRange().createContextualFragment(html)\\n        out_element.append(script_element)\\n    else:\\n        out_element.innerHTML = html\\n\\n\\ndef display(*values, target=None, append=True):\\n    if target is None:\\n        target = current_target()\\n    elif not isinstance(target, str):\\n        raise TypeError(f\\\"target must be str or None, not {target.__class__.__name__}\\\")\\n    elif target == \\\"\\\":\\n        raise ValueError(\\\"Cannot have an empty target\\\")\\n    elif target.startswith(\\\"#\\\"):\\n        # note: here target is str and not None!\\n        # align with @when behavior\\n        target = target[1:]\\n\\n    element = document.getElementById(target)\\n\\n    # If target cannot be found on the page, a ValueError is raised\\n    if element is None:\\n        raise ValueError(\\n            f\\\"Invalid selector with id={target}. Cannot be found in the page.\\\"\\n        )\\n\\n    # if element is a <script type=\\\"py\\\">, it has a 'target' attribute which\\n    # points to the visual element holding the displayed values. In that case,\\n    # use that.\\n    if element.tagName == \\\"SCRIPT\\\" and hasattr(element, \\\"target\\\"):\\n        element = element.target\\n\\n    for v in values:\\n        if not append:\\n            element.replaceChildren()\\n        _write(element, v, append=append)\\n\",\n    \"event_handling.py\": \"import inspect\\n\\nfrom pyodide.ffi.wrappers import add_event_listener\\nfrom pyscript.magic_js import document\\n\\n\\ndef when(event_type=None, selector=None):\\n    \\\"\\\"\\\"\\n    Decorates a function and passes py-* events to the decorated function\\n    The events might or not be an argument of the decorated function\\n    \\\"\\\"\\\"\\n\\n    def decorator(func):\\n        if isinstance(selector, str):\\n            elements = document.querySelectorAll(selector)\\n        else:\\n            # TODO: This is a hack that will be removed when pyscript becomes a package\\n            #       and we can better manage the imports without circular dependencies\\n            from pyweb import pydom\\n\\n            if isinstance(selector, pydom.Element):\\n                elements = [selector._js]\\n            elif isinstance(selector, pydom.ElementCollection):\\n                elements = [el._js for el in selector]\\n            else:\\n                raise ValueError(\\n                    f\\\"Invalid selector: {selector}. Selector must\\\"\\n                    \\\" be a string, a pydom.Element or a pydom.ElementCollection.\\\"\\n                )\\n\\n        sig = inspect.signature(func)\\n        # Function doesn't receive events\\n        if not sig.parameters:\\n\\n            def wrapper(*args, **kwargs):\\n                func()\\n\\n            for el in elements:\\n                add_event_listener(el, event_type, wrapper)\\n        else:\\n            for el in elements:\\n                add_event_listener(el, event_type, func)\\n        return func\\n\\n    return decorator\\n\",\n    \"magic_js.py\": \"import js as globalThis\\nfrom pyscript.util import NotSupported\\n\\nRUNNING_IN_WORKER = not hasattr(globalThis, \\\"document\\\")\\n\\nif RUNNING_IN_WORKER:\\n    import polyscript\\n\\n    PyWorker = NotSupported(\\n        \\\"pyscript.PyWorker\\\",\\n        \\\"pyscript.PyWorker works only when running in the main thread\\\",\\n    )\\n    window = polyscript.xworker.window\\n    document = window.document\\n    sync = polyscript.xworker.sync\\n\\n    # in workers the display does not have a default ID\\n    # but there is a sync utility from xworker\\n    def current_target():\\n        return polyscript.target\\n\\nelse:\\n    import _pyscript\\n    from _pyscript import PyWorker\\n\\n    window = globalThis\\n    document = globalThis.document\\n    sync = NotSupported(\\n        \\\"pyscript.sync\\\", \\\"pyscript.sync works only when running in a worker\\\"\\n    )\\n\\n    # in MAIN the current element target exist, just use it\\n    def current_target():\\n        return _pyscript.target\\n\",\n    \"util.py\": \"class NotSupported:\\n    \\\"\\\"\\\"\\n    Small helper that raises exceptions if you try to get/set any attribute on\\n    it.\\n    \\\"\\\"\\\"\\n\\n    def __init__(self, name, error):\\n        object.__setattr__(self, \\\"name\\\", name)\\n        object.__setattr__(self, \\\"error\\\", error)\\n\\n    def __repr__(self):\\n        return f\\\"<NotSupported {self.name} [{self.error}]>\\\"\\n\\n    def __getattr__(self, attr):\\n        raise AttributeError(self.error)\\n\\n    def __setattr__(self, attr, value):\\n        raise AttributeError(self.error)\\n\\n    def __call__(self, *args):\\n        raise TypeError(self.error)\\n\"\n  },\n  \"pyweb\": {\n    \"pydom.py\": \"import sys\\nimport warnings\\nfrom functools import cached_property\\nfrom typing import Any\\n\\nfrom pyodide.ffi import JsProxy\\nfrom pyscript import display, document, window\\n\\n# from pyscript import when as _when\\n\\nalert = window.alert\\n\\n\\nclass BaseElement:\\n    def __init__(self, js_element):\\n        self._js = js_element\\n        self._parent = None\\n        self.style = StyleProxy(self)\\n\\n    def __eq__(self, obj):\\n        \\\"\\\"\\\"Check if the element is the same as the other element by comparing\\n        the underlying JS element\\\"\\\"\\\"\\n        return isinstance(obj, BaseElement) and obj._js == self._js\\n\\n    @property\\n    def parent(self):\\n        if self._parent:\\n            return self._parent\\n\\n        if self._js.parentElement:\\n            self._parent = self.__class__(self._js.parentElement)\\n\\n        return self._parent\\n\\n    @property\\n    def __class(self):\\n        return self.__class__ if self.__class__ != PyDom else Element\\n\\n    def create(self, type_, is_child=True, classes=None, html=None, label=None):\\n        js_el = document.createElement(type_)\\n        element = self.__class(js_el)\\n\\n        if classes:\\n            for class_ in classes:\\n                element.add_class(class_)\\n\\n        if html is not None:\\n            element.html = html\\n\\n        if label is not None:\\n            element.label = label\\n\\n        if is_child:\\n            self.append(element)\\n\\n        return element\\n\\n    def find(self, selector):\\n        \\\"\\\"\\\"Return an ElementCollection representing all the child elements that\\n        match the specified selector.\\n\\n        Args:\\n            selector (str): A string containing a selector expression\\n\\n        Returns:\\n            ElementCollection: A collection of elements matching the selector\\n        \\\"\\\"\\\"\\n        elements = self._js.querySelectorAll(selector)\\n        if not elements:\\n            return None\\n        return ElementCollection([Element(el) for el in elements])\\n\\n\\nclass Element(BaseElement):\\n    @property\\n    def children(self):\\n        return [self.__class__(el) for el in self._js.children]\\n\\n    def append(self, child):\\n        # TODO: this is Pyodide specific for now!!!!!!\\n        # if we get passed a JSProxy Element directly we just map it to the\\n        # higher level Python element\\n        if isinstance(child, JsProxy):\\n            return self.append(Element(child))\\n\\n        elif isinstance(child, Element):\\n            self._js.appendChild(child._js)\\n\\n            return child\\n\\n        elif isinstance(child, ElementCollection):\\n            for el in child:\\n                self.append(el)\\n\\n    # -------- Pythonic Interface to Element -------- #\\n    @property\\n    def html(self):\\n        return self._js.innerHTML\\n\\n    @html.setter\\n    def html(self, value):\\n        self._js.innerHTML = value\\n\\n    @property\\n    def content(self):\\n        # TODO: This breaks with with standard template elements. Define how to best\\n        #       handle this specifica use case. Just not support for now?\\n        if self._js.tagName == \\\"TEMPLATE\\\":\\n            warnings.warn(\\n                \\\"Content attribute not supported for template elements.\\\", stacklevel=2\\n            )\\n            return None\\n        return self._js.innerHTML\\n\\n    @content.setter\\n    def content(self, value):\\n        # TODO: (same comment as above)\\n        if self._js.tagName == \\\"TEMPLATE\\\":\\n            warnings.warn(\\n                \\\"Content attribute not supported for template elements.\\\", stacklevel=2\\n            )\\n            return\\n\\n        display(value, target=self.id)\\n\\n    @property\\n    def id(self):\\n        return self._js.id\\n\\n    @id.setter\\n    def id(self, value):\\n        self._js.id = value\\n\\n    @property\\n    def value(self):\\n        return self._js.value\\n\\n    @value.setter\\n    def value(self, value):\\n        # in order to avoid confusion to the user, we don't allow setting the\\n        # value of elements that don't have a value attribute\\n        if not hasattr(self._js, \\\"value\\\"):\\n            raise AttributeError(\\n                f\\\"Element {self._js.tagName} has no value attribute. If you want to \\\"\\n                \\\"force a value attribute, set it directly using the `_js.value = <value>` \\\"\\n                \\\"javascript API attribute instead.\\\"\\n            )\\n        self._js.value = value\\n\\n    def clone(self, new_id=None):\\n        clone = Element(self._js.cloneNode(True))\\n        clone.id = new_id\\n\\n        return clone\\n\\n    def remove_class(self, classname):\\n        classList = self._js.classList\\n        if isinstance(classname, list):\\n            classList.remove(*classname)\\n        else:\\n            classList.remove(classname)\\n        return self\\n\\n    def add_class(self, classname):\\n        classList = self._js.classList\\n        if isinstance(classname, list):\\n            classList.add(*classname)\\n        else:\\n            self._js.classList.add(classname)\\n        return self\\n\\n    @property\\n    def classes(self):\\n        classes = self._js.classList.values()\\n        return [x for x in classes]\\n\\n    def show_me(self):\\n        self._js.scrollIntoView()\\n\\n    def when(self, event, handler):\\n        document.when(event, selector=self)(handler)\\n\\n\\nclass StyleProxy(dict):\\n    def __init__(self, element: Element) -> None:\\n        self._element = element\\n\\n    @cached_property\\n    def _style(self):\\n        return self._element._js.style\\n\\n    def __getitem__(self, key):\\n        return self._style.getPropertyValue(key)\\n\\n    def __setitem__(self, key, value):\\n        self._style.setProperty(key, value)\\n\\n    def remove(self, key):\\n        self._style.removeProperty(key)\\n\\n    def set(self, **kws):\\n        for k, v in kws.items():\\n            self._element._js.style.setProperty(k, v)\\n\\n    # CSS Properties\\n    # Reference: https://github.com/microsoft/TypeScript/blob/main/src/lib/dom.generated.d.ts#L3799C1-L5005C2\\n    # Following prperties automatically generated from the above reference using\\n    # tools/codegen_css_proxy.py\\n    @property\\n    def visible(self):\\n        return self._element._js.style.visibility\\n\\n    @visible.setter\\n    def visible(self, value):\\n        self._element._js.style.visibility = value\\n\\n\\nclass StyleCollection:\\n    def __init__(self, collection: \\\"ElementCollection\\\") -> None:\\n        self._collection = collection\\n\\n    def __get__(self, obj, objtype=None):\\n        return obj._get_attribute(\\\"style\\\")\\n\\n    def __getitem__(self, key):\\n        return self._collection._get_attribute(\\\"style\\\")[key]\\n\\n    def __setitem__(self, key, value):\\n        for element in self._collection._elements:\\n            element.style[key] = value\\n\\n    def remove(self, key):\\n        for element in self._collection._elements:\\n            element.style.remove(key)\\n\\n\\nclass ElementCollection:\\n    def __init__(self, elements: [Element]) -> None:\\n        self._elements = elements\\n        self.style = StyleCollection(self)\\n\\n    def __getitem__(self, key):\\n        # If it's an integer we use it to access the elements in the collection\\n        if isinstance(key, int):\\n            return self._elements[key]\\n        # If it's a slice we use it to support slice operations over the elements\\n        # in the collection\\n        elif isinstance(key, slice):\\n            return ElementCollection(self._elements[key])\\n\\n        # If it's anything else (basically a string) we use it as a selector\\n        # TODO: Write tests!\\n        elements = self._element.querySelectorAll(key)\\n        return ElementCollection([Element(el) for el in elements])\\n\\n    def __len__(self):\\n        return len(self._elements)\\n\\n    def __eq__(self, obj):\\n        \\\"\\\"\\\"Check if the element is the same as the other element by comparing\\n        the underlying JS element\\\"\\\"\\\"\\n        return isinstance(obj, ElementCollection) and obj._elements == self._elements\\n\\n    def _get_attribute(self, attr, index=None):\\n        if index is None:\\n            return [getattr(el, attr) for el in self._elements]\\n\\n        # As JQuery, when getting an attr, only return it for the first element\\n        return getattr(self._elements[index], attr)\\n\\n    def _set_attribute(self, attr, value):\\n        for el in self._elements:\\n            setattr(el, attr, value)\\n\\n    @property\\n    def html(self):\\n        return self._get_attribute(\\\"html\\\")\\n\\n    @html.setter\\n    def html(self, value):\\n        self._set_attribute(\\\"html\\\", value)\\n\\n    @property\\n    def value(self):\\n        return self._get_attribute(\\\"value\\\")\\n\\n    @value.setter\\n    def value(self, value):\\n        self._set_attribute(\\\"value\\\", value)\\n\\n    @property\\n    def children(self):\\n        return self._elements\\n\\n    def __iter__(self):\\n        yield from self._elements\\n\\n    def __repr__(self):\\n        return f\\\"{self.__class__.__name__} (length: {len(self._elements)}) {self._elements}\\\"\\n\\n\\nclass DomScope:\\n    def __getattr__(self, __name: str) -> Any:\\n        element = document[f\\\"#{__name}\\\"]\\n        if element:\\n            return element[0]\\n\\n\\nclass PyDom(BaseElement):\\n    # Add objects we want to expose to the DOM namespace since this class instance is being\\n    # remapped as \\\"the module\\\" itself\\n    BaseElement = BaseElement\\n    Element = Element\\n    ElementCollection = ElementCollection\\n\\n    def __init__(self):\\n        super().__init__(document)\\n        self.ids = DomScope()\\n        self.body = Element(document.body)\\n        self.head = Element(document.head)\\n\\n    def create(self, type_, parent=None, classes=None, html=None):\\n        return super().create(type_, is_child=False)\\n\\n    def __getitem__(self, key):\\n        if isinstance(key, int):\\n            indices = range(*key.indices(len(self.list)))\\n            return [self.list[i] for i in indices]\\n\\n        elements = self._js.querySelectorAll(key)\\n        if not elements:\\n            return None\\n        return ElementCollection([Element(el) for el in elements])\\n\\n\\ndom = PyDom()\\n\\nsys.modules[__name__] = dom\\n\"\n  }\n};\n","import { typedSet } from \"type-checked-collections\";\nimport { dedent } from \"polyscript/exports\";\nimport toJSONCallback from \"to-json-callback\";\n\nimport stdlib from \"./stdlib.js\";\n\nexport const main = (name) => hooks.main[name];\nexport const worker = (name) => hooks.worker[name];\n\nconst code = (hooks, branch, key, lib) => {\n    hooks[key] = () => {\n        const arr = lib ? [lib] : [];\n        arr.push(...branch(key));\n        return arr.map(dedent).join(\"\\n\");\n    };\n};\n\nexport const codeFor = (branch) => {\n    const hooks = {};\n    code(hooks, branch, `codeBeforeRun`, stdlib);\n    code(hooks, branch, `codeBeforeRunAsync`, stdlib);\n    code(hooks, branch, `codeAfterRun`);\n    code(hooks, branch, `codeAfterRunAsync`);\n    return hooks;\n};\n\nexport const createFunction = (self, name) => {\n    const cbs = [...worker(name)];\n    if (cbs.length) {\n        const cb = toJSONCallback(\n            self[`_${name}`] ||\n                (name.endsWith(\"Async\")\n                    ? async (wrap, xworker, ...cbs) => {\n                          for (const cb of cbs) await cb(wrap, xworker);\n                      }\n                    : (wrap, xworker, ...cbs) => {\n                          for (const cb of cbs) cb(wrap, xworker);\n                      }),\n        );\n        const a = cbs.map(toJSONCallback).join(\", \");\n        return Function(`return(w,x)=>(${cb})(w,x,...[${a}])`)();\n    }\n};\n\nconst SetFunction = typedSet({ typeof: \"function\" });\nconst SetString = typedSet({ typeof: \"string\" });\n\nexport const hooks = {\n    main: {\n        /** @type {Set<function>} */\n        onWorker: new SetFunction(),\n        /** @type {Set<function>} */\n        onReady: new SetFunction(),\n        /** @type {Set<function>} */\n        onBeforeRun: new SetFunction(),\n        /** @type {Set<function>} */\n        onBeforeRunAsync: new SetFunction(),\n        /** @type {Set<function>} */\n        onAfterRun: new SetFunction(),\n        /** @type {Set<function>} */\n        onAfterRunAsync: new SetFunction(),\n        /** @type {Set<string>} */\n        codeBeforeRun: new SetString(),\n        /** @type {Set<string>} */\n        codeBeforeRunAsync: new SetString(),\n        /** @type {Set<string>} */\n        codeAfterRun: new SetString(),\n        /** @type {Set<string>} */\n        codeAfterRunAsync: new SetString(),\n    },\n    worker: {\n        /** @type {Set<function>} */\n        onReady: new SetFunction(),\n        /** @type {Set<function>} */\n        onBeforeRun: new SetFunction(),\n        /** @type {Set<function>} */\n        onBeforeRunAsync: new SetFunction(),\n        /** @type {Set<function>} */\n        onAfterRun: new SetFunction(),\n        /** @type {Set<function>} */\n        onAfterRunAsync: new SetFunction(),\n        /** @type {Set<string>} */\n        codeBeforeRun: new SetString(),\n        /** @type {Set<string>} */\n        codeBeforeRunAsync: new SetString(),\n        /** @type {Set<string>} */\n        codeAfterRun: new SetString(),\n        /** @type {Set<string>} */\n        codeAfterRunAsync: new SetString(),\n    },\n};\n","/*! (c) PyScript Development Team */\n\nimport stickyModule from \"sticky-module\";\nimport \"@ungap/with-resolvers\";\n\nimport {\n    INVALID_CONTENT,\n    Hook,\n    XWorker,\n    assign,\n    dedent,\n    define,\n    defineProperty,\n    dispatch,\n    queryTarget,\n    unescape,\n    whenDefined,\n} from \"polyscript/exports\";\n\nimport \"./all-done.js\";\nimport TYPES from \"./types.js\";\nimport configs from \"./config.js\";\nimport sync from \"./sync.js\";\nimport bootstrapNodeAndPlugins from \"./plugins-helper.js\";\nimport { ErrorCode } from \"./exceptions.js\";\nimport { robustFetch as fetch, getText } from \"./fetch.js\";\nimport { hooks, main, worker, codeFor, createFunction } from \"./hooks.js\";\n\n// allows lazy element features on code evaluation\nlet currentElement;\n\n// generic helper to disambiguate between custom element and script\nconst isScript = ({ tagName }) => tagName === \"SCRIPT\";\n\nlet shouldRegister = true;\nconst registerModule = ({ XWorker: $XWorker, interpreter, io }) => {\n    // automatically use the pyscript stderr (when/if defined)\n    // this defaults to console.error\n    function PyWorker(...args) {\n        const worker = $XWorker(...args);\n        worker.onerror = ({ error }) => io.stderr(error);\n        return worker;\n    }\n\n    // enrich the Python env with some JS utility for main\n    interpreter.registerJsModule(\"_pyscript\", {\n        PyWorker,\n        get target() {\n            return isScript(currentElement)\n                ? currentElement.target.id\n                : currentElement.id;\n        },\n    });\n};\n\n// avoid multiple initialization of the same library\nconst [\n    {\n        PyWorker: exportedPyWorker,\n        hooks: exportedHooks,\n        config: exportedConfig,\n        whenDefined: exportedWhenDefined,\n    },\n    alreadyLive,\n] = stickyModule(\"@pyscript/core\", {\n    PyWorker,\n    hooks,\n    config: {},\n    whenDefined,\n});\n\nexport {\n    TYPES,\n    exportedPyWorker as PyWorker,\n    exportedHooks as hooks,\n    exportedConfig as config,\n    exportedWhenDefined as whenDefined,\n};\n\nconst hooked = new Map();\n\nfor (const [TYPE, interpreter] of TYPES) {\n    // avoid any dance if the module already landed\n    if (alreadyLive) break;\n\n    const dispatchDone = (element, isAsync, result) => {\n        if (isAsync) result.then(() => dispatch(element, TYPE, \"done\"));\n        else dispatch(element, TYPE, \"done\");\n    };\n\n    const { config, plugins, error } = configs.get(TYPE);\n\n    // create a unique identifier when/if needed\n    let id = 0;\n    const getID = (prefix = TYPE) => `${prefix}-${id++}`;\n\n    /**\n     * Given a generic DOM Element, tries to fetch the 'src' attribute, if present.\n     * It either throws an error if the 'src' can't be fetched or it returns a fallback\n     * content as source.\n     */\n    const fetchSource = async (tag, io, asText) => {\n        if (tag.hasAttribute(\"src\")) {\n            try {\n                return await fetch(tag.getAttribute(\"src\")).then(getText);\n            } catch (error) {\n                io.stderr(error);\n            }\n        }\n\n        if (asText) return dedent(tag.textContent);\n\n        const code = dedent(unescape(tag.innerHTML));\n        console.warn(\n            `Deprecated: use <script type=\"${TYPE}\"> for an always safe content parsing:\\n`,\n            code,\n        );\n        return code;\n    };\n\n    // define the module as both `<script type=\"py\">` and `<py-script>`\n    // but only if the config didn't throw an error\n    if (!error) {\n        // ensure plugins are bootstrapped already before custom type definition\n        // NOTE: we cannot top-level await in here as plugins import other utilities\n        //       from core.js itself so that custom definition should not be blocking.\n        plugins.then(() => {\n            // possible early errors sent by polyscript\n            const errors = new Map();\n\n            // specific main and worker hooks\n            const hooks = {\n                main: {\n                    ...codeFor(main),\n                    async onReady(wrap, element) {\n                        if (shouldRegister) {\n                            shouldRegister = false;\n                            registerModule(wrap);\n                        }\n\n                        // allows plugins to do whatever they want with the element\n                        // before regular stuff happens in here\n                        for (const callback of main(\"onReady\"))\n                            await callback(wrap, element);\n\n                        // now that all possible plugins are configured,\n                        // bail out if polyscript encountered an error\n                        if (errors.has(element)) {\n                            let { message } = errors.get(element);\n                            errors.delete(element);\n                            const clone = message === INVALID_CONTENT;\n                            message = `(${ErrorCode.CONFLICTING_CODE}) ${message} for `;\n                            message += element.cloneNode(clone).outerHTML;\n                            wrap.io.stderr(message);\n                            return;\n                        }\n\n                        if (isScript(element)) {\n                            const {\n                                attributes: { async: isAsync, target },\n                            } = element;\n                            const hasTarget = !!target?.value;\n                            const show = hasTarget\n                                ? queryTarget(element, target.value)\n                                : document.createElement(\"script-py\");\n\n                            if (!hasTarget) {\n                                const { head, body } = document;\n                                if (head.contains(element)) body.append(show);\n                                else element.after(show);\n                            }\n                            if (!show.id) show.id = getID();\n\n                            // allows the code to retrieve the target element via\n                            // document.currentScript.target if needed\n                            defineProperty(element, \"target\", { value: show });\n\n                            // notify before the code runs\n                            dispatch(element, TYPE, \"ready\");\n                            dispatchDone(\n                                element,\n                                isAsync,\n                                wrap[`run${isAsync ? \"Async\" : \"\"}`](\n                                    await fetchSource(element, wrap.io, true),\n                                ),\n                            );\n                        } else {\n                            // resolve PyScriptElement to allow connectedCallback\n                            element._wrap.resolve(wrap);\n                        }\n                        console.debug(\"[pyscript/main] PyScript Ready\");\n                    },\n                    onWorker(_, xworker) {\n                        assign(xworker.sync, sync);\n                        for (const callback of main(\"onWorker\"))\n                            callback(_, xworker);\n                    },\n                    onBeforeRun(wrap, element) {\n                        currentElement = element;\n                        bootstrapNodeAndPlugins(\n                            main,\n                            wrap,\n                            element,\n                            \"onBeforeRun\",\n                        );\n                    },\n                    onBeforeRunAsync(wrap, element) {\n                        currentElement = element;\n                        return bootstrapNodeAndPlugins(\n                            main,\n                            wrap,\n                            element,\n                            \"onBeforeRunAsync\",\n                        );\n                    },\n                    onAfterRun(wrap, element) {\n                        bootstrapNodeAndPlugins(\n                            main,\n                            wrap,\n                            element,\n                            \"onAfterRun\",\n                        );\n                    },\n                    onAfterRunAsync(wrap, element) {\n                        return bootstrapNodeAndPlugins(\n                            main,\n                            wrap,\n                            element,\n                            \"onAfterRunAsync\",\n                        );\n                    },\n                },\n                worker: {\n                    ...codeFor(worker),\n                    // these are lazy getters that returns a composition\n                    // of the current hooks or undefined, if no hook is present\n                    get onReady() {\n                        return createFunction(this, \"onReady\", true);\n                    },\n                    get onBeforeRun() {\n                        return createFunction(this, \"onBeforeRun\", false);\n                    },\n                    get onBeforeRunAsync() {\n                        return createFunction(this, \"onBeforeRunAsync\", true);\n                    },\n                    get onAfterRun() {\n                        return createFunction(this, \"onAfterRun\", false);\n                    },\n                    get onAfterRunAsync() {\n                        return createFunction(this, \"onAfterRunAsync\", true);\n                    },\n                },\n            };\n\n            hooked.set(TYPE, hooks);\n\n            define(TYPE, {\n                config,\n                interpreter,\n                hooks,\n                env: `${TYPE}-script`,\n                version: config?.interpreter,\n                onerror(error, element) {\n                    errors.set(element, error);\n                },\n            });\n\n            customElements.define(\n                `${TYPE}-script`,\n                class extends HTMLElement {\n                    constructor() {\n                        assign(super(), {\n                            _wrap: Promise.withResolvers(),\n                            srcCode: \"\",\n                            executed: false,\n                        });\n                    }\n                    get id() {\n                        return super.id || (super.id = getID());\n                    }\n                    set id(value) {\n                        super.id = value;\n                    }\n                    async connectedCallback() {\n                        if (!this.executed) {\n                            this.executed = true;\n                            const isAsync = this.hasAttribute(\"async\");\n                            const { io, run, runAsync } = await this._wrap\n                                .promise;\n                            this.srcCode = await fetchSource(\n                                this,\n                                io,\n                                !this.childElementCount,\n                            );\n                            this.replaceChildren();\n                            this.style.display = \"block\";\n                            dispatch(this, TYPE, \"ready\");\n                            dispatchDone(\n                                this,\n                                isAsync,\n                                (isAsync ? runAsync : run)(this.srcCode),\n                            );\n                        }\n                    }\n                },\n            );\n        });\n    }\n\n    // export the used config without allowing leaks through it\n    exportedConfig[TYPE] = structuredClone(config);\n}\n\n/**\n * A `Worker` facade able to bootstrap on the worker thread only a PyScript module.\n * @param {string} file the python file to run ina worker.\n * @param {{config?: string | object, async?: boolean}} [options] optional configuration for the worker.\n * @returns {Worker & {sync: ProxyHandler<object>}}\n */\nfunction PyWorker(file, options) {\n    const hooks = hooked.get(\"py\");\n    // this propagates pyscript worker hooks without needing a pyscript\n    // bootstrap + it passes arguments and enforces `pyodide`\n    // as the interpreter to use in the worker, as all hooks assume that\n    // and as `pyodide` is the only default interpreter that can deal with\n    // all the features we need to deliver pyscript out there.\n    const xworker = XWorker.call(new Hook(null, hooks), file, {\n        type: \"pyodide\",\n        ...options,\n    });\n    assign(xworker.sync, sync);\n    return xworker;\n}\n"],"names":["stickyModule","name","value","global","globalThis","symbol","Symbol","for","known","Object","defineProperty","Promise","withResolvers","a","b","c","this","resolve","reject","promise","getBuffer","response","arrayBuffer","getJSON","json","getText","text","$","css","root","document","querySelector","$$","querySelectorAll","$x","path","xpath","XPathEvaluator","createExpression","evaluate","XPathResult","ORDERED_NODE_SNAPSHOT_TYPE","result","i","snapshotLength","push","snapshotItem","env","self","deserialize","serialized","_","as","out","index","set","unpair","has","get","type","arr","object","key","Date","source","flags","RegExp","map","Map","Set","add","message","BigInt","deserializer","EMPTY","toString","keys","typeOf","asString","call","slice","includes","shouldSkip","TYPE","serialize","lossy","strict","pair","entry","TypeError","valueOf","toJSON","entries","toISOString","serializer","parse","$parse","stringify","$stringify","JSON","options","str","any","CHANNEL","MAIN","THREAD","OBJECT","FUNCTION","NUMBER","STRING","UNDEFINED","SYMBOL","waitAsyncFallback","buffer","onmessage","w","Worker","postMessage","Int32Array","SharedArrayBuffer","Uint16Array","BYTES_PER_ELEMENT","I32_BYTES","UI16_BYTES","isArray","Array","notify","wait","waitAsync","Atomics","buffers","WeakSet","context","WeakMap","syncResult","then","fn","uid","coincident","transform","interrupt","post","transfer","args","handler","delay","decoder","TextDecoder","waitFor","isAsync","sb","waitInterrupt","seppuku","Proxy","action","startsWith","id","at","delete","pop","deadlock","setTimeout","console","warn","clearTimeout","length","bytes","decode","actions","callback","Error","size","results","addEventListener","async","event","details","data","stopImmediatePropagation","rest","error","ui16a","charCodeAt","registry","FinalizationRegistry","onGarbageCollected","held","debug","String","create","hold","return","R","token","target","register","getOwnPropertyDescriptor","getPrototypeOf","isExtensible","ownKeys","preventExtensions","setPrototypeOf","Reflect","assign","TypedArray","Int8Array","augment","descriptor","how","asEntry","symbols","filter","s","o","Bound","APPLY","CONSTRUCT","DEFINE_PROPERTY","DELETE_PROPERTY","GET","GET_OWN_PROPERTY_DESCRIPTOR","GET_PROTOTYPE_OF","HAS","IS_EXTENSIBLE","OWN_KEYS","PREVENT_EXTENSION","SET","SET_PROTOTYPE_OF","DELETE","main$1","patch","eventsHandler","EventTarget","prototype","listener","invoke","concat","handleEvent","currentTarget","method","thread","ids","values","__thread__","sid","cb","Event","WeakRef","createGCHook","deref","trapsHandler","thisArg","apply","proto","trap","proxy","toLowerCase","main","__proxied__","bound","isProxy","localArray","__main__","proxies","argument","bind","proxyHandler","fromEntry","TRAP","ctx","remoteArray","ref","Worker$1","$coincident","util","dedent","string","t","l","arguments","content","line","split","trim","test","replace","$1","es","unes","cape","m","tpl","unescape","un","defineProperties","all","absoluteURL","base","location","href","URL","nodeInfo","node","tag","tagName","dispatch","what","worker","CE","CustomEvent","dispatchEvent","bubbles","detail","createResolved","module","config","interpreter","io","run","code","runAsync","runEvent","createOverload","pre","stdio","init","localIO","stderr","stdout","log","engine","writeFile","FS","PATH","PATH_FS","absPath","mkdirTree","dirname","Uint8Array","canOwn","tree","join","current","branch","mkdir","cwd","joinPaths","parts","res","part","p","fetchResolved","config_fetch","url","fetch","fetchPaths","files","to_file","from","undefined","endsWith","flatMap","to_folder","file","filename","lastIndexOf","calculateFetchPaths","fillName","dest","parseTemplate","src","k","SyntaxError","fetchFiles","config_files","targets","sourceDest","calculateFilesPaths","registerJSModule","registerJsModule","runPython","runPythonAsync","globals","micropython","version","loadMicroPython","_module","toJsOptions","dict_converter","fromEntries","pyodide","loadPyodide","indexURL","packages","loadPackage","micropip","pyimport","install","keep_going","destroy","ffi","PyProxy","toJs","jsType","ruby_wasm_wasi","experimental","DefaultRubyVM","WebAssembly","compile","vm","eval","evalAsync","wrap","wasmoon","LuaFactory","LuaLibraries","createEngine","getTable","Base","setField","doStringSync","doString","cmodule","writeFileShim","configs","selectors","prefixes","import","baseURL","getConfigURLAndType","getRuntime","absolute","getRuntimeID","beforeRun","afterRun","js","resolved","polluteJS","before","after","patched","Hook$1","constructor","hooks","onWorker","jsHooks","codeHooks","xworker","createObjectURL","Blob","isHook","Hook","bootstrap","sync","onerror","writable","configurable","INVALID_CONTENT","workerURL","element","attributes","childElementCount","innerHTML","localName","textContent","queryTarget","script","idOrSelector","parent","parentNode","getRoot","getElementById","targetDescriptor","createElement","handle","handled","interpreters","getValue","prefix","getDetails","runtime","queue","XWorker","$xworker","closest","body","append","versionValue","configValue","targetValue","done","currentScript","execute","queueMicrotask","awaitInterpreter","available","r","ownerElement","el","getAttribute","addAllListeners","disabled","CUSTOM_SELECTORS","types","waitList","handleCustomType","selector","matches","custom","hasAttribute","workerError","defaultRegistry","hook","structuredClone","suffix","overload","beforeCB","afterCB","onReady","dontBotherCount","whenDefined","define","alreadyLive","dontBother","splice","indexOf","remove","head","forEach","$whenDefined","$env","$Hook","$XWorker","mo","MutationObserver","records","attributeName","addedNodes","nodeType","shouldHandle","observe","childList","subtree","attachShadow","Element","TYPES","waitForIt","once","allPlugins","ErrorCode","UserError","errorCode","messageType","super","FetchError","robustFetch","err","errMsg","ok","errorMsg","status","statusText","configDetails","toml","ext","expected","badURL","syntaxError","plugins","parsed","pyConfig","e","toBeAwaited","default","sleep","seconds","bootstrapNodeAndPlugins","validator","Class","checks","v","C","some","f","failure","kind","typedSet","check","fail","typeof","instanceof","checkFail","createSet","toJSONCallback","python","write","literal","pyscript","pyweb","stdlib","lib","codeFor","createFunction","cbs","Function","SetFunction","SetString","onBeforeRun","onBeforeRunAsync","onAfterRun","onAfterRunAsync","codeBeforeRun","codeBeforeRunAsync","codeAfterRun","codeAfterRunAsync","currentElement","isScript","shouldRegister","registerModule","PyWorker","exportedPyWorker","exportedHooks","exportedConfig","exportedWhenDefined","hooked","dispatchDone","getID","fetchSource","asText","errors","clone","cloneNode","outerHTML","hasTarget","show","contains","_wrap","customElements","HTMLElement","srcCode","executed","connectedCallback","replaceChildren","style","display"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,53,54]}