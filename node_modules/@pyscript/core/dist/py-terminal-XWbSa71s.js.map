{"version":3,"file":"py-terminal-XWbSa71s.js","sources":["../src/plugins/py-terminal.js"],"sourcesContent":["// PyScript py-terminal plugin\nimport { TYPES, hooks } from \"../core.js\";\nimport { notify } from \"./error.js\";\n\nconst SELECTOR = [...TYPES.keys()]\n    .map((type) => `script[type=\"${type}\"][terminal],${type}-script[terminal]`)\n    .join(\",\");\n\n// show the error on main and\n// stops the module from keep executing\nconst notifyAndThrow = (message) => {\n    notify(message);\n    throw new Error(message);\n};\n\nconst pyTerminal = async () => {\n    const terminals = document.querySelectorAll(SELECTOR);\n\n    // no results will look further for runtime nodes\n    if (!terminals.length) return;\n\n    // if we arrived this far, let's drop the MutationObserver\n    // as we only support one terminal per page (right now).\n    mo.disconnect();\n\n    // we currently support only one terminal as in \"classic\"\n    if (terminals.length > 1) notifyAndThrow(\"You can use at most 1 terminal.\");\n\n    const [element] = terminals;\n    // hopefully to be removed in the near future!\n    if (element.matches('script[type=\"mpy\"],mpy-script'))\n        notifyAndThrow(\"Unsupported terminal.\");\n\n    // import styles lazily\n    document.head.append(\n        Object.assign(document.createElement(\"link\"), {\n            rel: \"stylesheet\",\n            href: new URL(\"./xterm.css\", import.meta.url),\n        }),\n    );\n\n    // lazy load these only when a valid terminal is found\n    const [{ Terminal }, { Readline }] = await Promise.all([\n        import(/* webpackIgnore: true */ \"../3rd-party/xterm.js\"),\n        import(/* webpackIgnore: true */ \"../3rd-party/xterm-readline.js\"),\n    ]);\n\n    const readline = new Readline();\n\n    // common main thread initialization for both worker\n    // or main case, bootstrapping the terminal on its target\n    const init = (options) => {\n        let target = element;\n        const selector = element.getAttribute(\"target\");\n        if (selector) {\n            target =\n                document.getElementById(selector) ||\n                document.querySelector(selector);\n            if (!target) throw new Error(`Unknown target ${selector}`);\n        } else {\n            target = document.createElement(\"py-terminal\");\n            target.style.display = \"block\";\n            element.after(target);\n        }\n        const terminal = new Terminal({\n            theme: {\n                background: \"#191A19\",\n                foreground: \"#F5F2E7\",\n            },\n            ...options,\n        });\n        terminal.loadAddon(readline);\n        terminal.open(target);\n        terminal.focus();\n    };\n\n    // branch logic for the worker\n    if (element.hasAttribute(\"worker\")) {\n        // when the remote thread onReady triggers:\n        // setup the interpreter stdout and stderr\n        const workerReady = ({ interpreter }, { sync }) => {\n            sync.pyterminal_drop_hooks();\n            const decoder = new TextDecoder();\n            let data = \"\";\n            const generic = {\n                isatty: true,\n                write(buffer) {\n                    data = decoder.decode(buffer);\n                    sync.pyterminal_write(data);\n                    return buffer.length;\n                },\n            };\n            interpreter.setStdout(generic);\n            interpreter.setStderr(generic);\n            interpreter.setStdin({\n                isatty: true,\n                stdin: () => sync.pyterminal_read(data),\n            });\n        };\n\n        // add a hook on the main thread to setup all sync helpers\n        // also bootstrapping the XTerm target on main\n        hooks.main.onWorker.add(function worker(_, xworker) {\n            hooks.main.onWorker.delete(worker);\n            init({\n                disableStdin: false,\n                cursorBlink: true,\n                cursorStyle: \"block\",\n            });\n            xworker.sync.pyterminal_read = readline.read.bind(readline);\n            xworker.sync.pyterminal_write = readline.write.bind(readline);\n            // allow a worker to drop main thread hooks ASAP\n            xworker.sync.pyterminal_drop_hooks = () => {\n                hooks.worker.onReady.delete(workerReady);\n            };\n        });\n\n        // setup remote thread JS/Python code for whenever the\n        // worker is ready to become a terminal\n        hooks.worker.onReady.add(workerReady);\n    } else {\n        // in the main case, just bootstrap XTerm without\n        // allowing any input as that's not possible / awkward\n        hooks.main.onReady.add(function main({ io }) {\n            console.warn(\"py-terminal is read only on main thread\");\n            hooks.main.onReady.delete(main);\n            init({\n                disableStdin: true,\n                cursorBlink: false,\n                cursorStyle: \"underline\",\n            });\n            io.stdout = (value) => {\n                readline.write(`${value}\\n`);\n            };\n            io.stderr = (error) => {\n                readline.write(`${error.message || error}\\n`);\n            };\n        });\n    }\n};\n\nconst mo = new MutationObserver(pyTerminal);\nmo.observe(document, { childList: true, subtree: true });\n\n// try to check the current document ASAP\nexport default pyTerminal();\n"],"names":["SELECTOR","TYPES","keys","map","type","join","notifyAndThrow","message","notify","Error","pyTerminal","async","terminals","document","querySelectorAll","length","mo","disconnect","element","matches","head","append","Object","assign","createElement","rel","href","URL","url","Terminal","Readline","Promise","all","import","readline","init","options","target","selector","getAttribute","getElementById","querySelector","style","display","after","terminal","theme","background","foreground","loadAddon","open","focus","hasAttribute","workerReady","interpreter","sync","pyterminal_drop_hooks","decoder","TextDecoder","data","generic","isatty","write","buffer","decode","pyterminal_write","setStdout","setStderr","setStdin","stdin","pyterminal_read","hooks","main","onWorker","add","worker","_","xworker","delete","disableStdin","cursorBlink","cursorStyle","read","bind","onReady","io","console","warn","stdout","value","stderr","error","MutationObserver","observe","childList","subtree","pyTerminal$1"],"mappings":"0FAIA,MAAMA,EAAW,IAAIC,EAAMC,QACtBC,KAAKC,GAAS,gBAAgBA,iBAAoBA,uBAClDC,KAAK,KAIJC,EAAkBC,IAEpB,MADAC,EAAOD,GACD,IAAIE,MAAMF,EAAQ,EAGtBG,EAAaC,UACf,MAAMC,EAAYC,SAASC,iBAAiBd,GAG5C,IAAKY,EAAUG,OAAQ,OAIvBC,EAAGC,aAGCL,EAAUG,OAAS,GAAGT,EAAe,mCAEzC,MAAOY,GAAWN,EAEdM,EAAQC,QAAQ,kCAChBb,EAAe,yBAGnBO,SAASO,KAAKC,OACVC,OAAOC,OAAOV,SAASW,cAAc,QAAS,CAC1CC,IAAK,aACLC,KAAM,IAAIC,IAAI,0BAA2BC,QAKjD,OAAOC,SAAEA,IAAYC,SAAEA,UAAoBC,QAAQC,IAAI,CACnDC,OAAiC,uBACjCA,OAAiC,kCAG/BC,EAAW,IAAIJ,EAIfK,EAAQC,IACV,IAAIC,EAASnB,EACb,MAAMoB,EAAWpB,EAAQqB,aAAa,UACtC,GAAID,GAIA,GAHAD,EACIxB,SAAS2B,eAAeF,IACxBzB,SAAS4B,cAAcH,IACtBD,EAAQ,MAAM,IAAI5B,MAAM,kBAAkB6B,UAE/CD,EAASxB,SAASW,cAAc,eAChCa,EAAOK,MAAMC,QAAU,QACvBzB,EAAQ0B,MAAMP,GAElB,MAAMQ,EAAW,IAAIhB,EAAS,CAC1BiB,MAAO,CACHC,WAAY,UACZC,WAAY,cAEbZ,IAEPS,EAASI,UAAUf,GACnBW,EAASK,KAAKb,GACdQ,EAASM,OAAO,EAIpB,GAAIjC,EAAQkC,aAAa,UAAW,CAGhC,MAAMC,EAAc,EAAGC,gBAAiBC,WACpCA,EAAKC,wBACL,MAAMC,EAAU,IAAIC,YACpB,IAAIC,EAAO,GACX,MAAMC,EAAU,CACZC,QAAQ,EACRC,MAAMC,IACFJ,EAAOF,EAAQO,OAAOD,GACtBR,EAAKU,iBAAiBN,GACfI,EAAOhD,SAGtBuC,EAAYY,UAAUN,GACtBN,EAAYa,UAAUP,GACtBN,EAAYc,SAAS,CACjBP,QAAQ,EACRQ,MAAO,IAAMd,EAAKe,gBAAgBX,IACpC,EAKNY,EAAMC,KAAKC,SAASC,KAAI,SAASC,EAAOC,EAAGC,GACvCN,EAAMC,KAAKC,SAASK,OAAOH,GAC3BxC,EAAK,CACD4C,cAAc,EACdC,aAAa,EACbC,YAAa,UAEjBJ,EAAQtB,KAAKe,gBAAkBpC,EAASgD,KAAKC,KAAKjD,GAClD2C,EAAQtB,KAAKU,iBAAmB/B,EAAS4B,MAAMqB,KAAKjD,GAEpD2C,EAAQtB,KAAKC,sBAAwB,KACjCe,EAAMI,OAAOS,QAAQN,OAAOzB,EAAY,CAExD,IAIQkB,EAAMI,OAAOS,QAAQV,IAAIrB,EACjC,MAGQkB,EAAMC,KAAKY,QAAQV,KAAI,SAASF,GAAKa,GAAEA,IACnCC,QAAQC,KAAK,2CACbhB,EAAMC,KAAKY,QAAQN,OAAON,GAC1BrC,EAAK,CACD4C,cAAc,EACdC,aAAa,EACbC,YAAa,cAEjBI,EAAGG,OAAUC,IACTvD,EAAS4B,MAAM,GAAG2B,MAAU,EAEhCJ,EAAGK,OAAUC,IACTzD,EAAS4B,MAAM,GAAG6B,EAAMpF,SAAWoF,MAAU,CAE7D,GACK,EAGC3E,EAAK,IAAI4E,iBAAiBlF,GAChCM,EAAG6E,QAAQhF,SAAU,CAAEiF,WAAW,EAAMC,SAAS,IAGjD,IAAAC,EAAetF"}